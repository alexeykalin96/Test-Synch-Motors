
CurrentSensorTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001042  000010d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001042  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c2  0080011a  0080011a  000010f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001776  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003f8  00000000  00000000  000029a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000680  00000000  00000000  00002d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003f8  00000000  00000000  00003420  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000097b  00000000  00000000  00003818  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000101f  00000000  00000000  00004193  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  000051b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 66 06 	jmp	0xccc	; 0xccc <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e4       	ldi	r30, 0x42	; 66
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 3d       	cpi	r26, 0xDC	; 220
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <main>
      9e:	0c 94 1f 08 	jmp	0x103e	; 0x103e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN10CurrentADC13ADC_INTERRUPTEv>:
	ADCSRA &= ~((1 << ADEN)|(1<<ADIE));
}

void CurrentADC::ADC_INTERRUPT(void)
{
	if(((ADMUX & (1 << MUX0)) == 0))
      a6:	80 91 7c 00 	lds	r24, 0x007C
      aa:	80 fd       	sbrc	r24, 0
      ac:	7f c0       	rjmp	.+254    	; 0x1ac <_ZN10CurrentADC13ADC_INTERRUPTEv+0x106>
	{
		count_ADCL = ADCL;
      ae:	80 91 78 00 	lds	r24, 0x0078
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	90 93 db 02 	sts	0x02DB, r25
      b8:	80 93 da 02 	sts	0x02DA, r24
		count_ADCH = ADCH;
      bc:	80 91 79 00 	lds	r24, 0x0079
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	90 93 d9 02 	sts	0x02D9, r25
      c6:	80 93 d8 02 	sts	0x02D8, r24
		buffer_ADC1[counter_ADC1] = (count_ADCH << 8)|(count_ADCL);
      ca:	e0 91 46 01 	lds	r30, 0x0146
      ce:	f0 91 47 01 	lds	r31, 0x0147
      d2:	80 91 d8 02 	lds	r24, 0x02D8
      d6:	90 91 d9 02 	lds	r25, 0x02D9
      da:	20 91 da 02 	lds	r18, 0x02DA
      de:	30 91 db 02 	lds	r19, 0x02DB
      e2:	98 2f       	mov	r25, r24
      e4:	88 27       	eor	r24, r24
      e6:	82 2b       	or	r24, r18
      e8:	93 2b       	or	r25, r19
      ea:	ee 0f       	add	r30, r30
      ec:	ff 1f       	adc	r31, r31
      ee:	e0 5f       	subi	r30, 0xF0	; 240
      f0:	fd 4f       	sbci	r31, 0xFD	; 253
      f2:	91 83       	std	Z+1, r25	; 0x01
      f4:	80 83       	st	Z, r24
		if(counter_ADC1 == 99)
      f6:	80 91 46 01 	lds	r24, 0x0146
      fa:	90 91 47 01 	lds	r25, 0x0147
      fe:	83 36       	cpi	r24, 0x63	; 99
     100:	91 05       	cpc	r25, r1
     102:	09 f0       	breq	.+2      	; 0x106 <_ZN10CurrentADC13ADC_INTERRUPTEv+0x60>
     104:	44 c0       	rjmp	.+136    	; 0x18e <_ZN10CurrentADC13ADC_INTERRUPTEv+0xe8>
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	30 e0       	ldi	r19, 0x00	; 0
		{
			for(int i = 0; i < 100; i++)
			{
				summa += buffer_ADC1[i];
     10a:	f9 01       	movw	r30, r18
     10c:	ee 0f       	add	r30, r30
     10e:	ff 1f       	adc	r31, r31
     110:	e0 5f       	subi	r30, 0xF0	; 240
     112:	fd 4f       	sbci	r31, 0xFD	; 253
     114:	80 81       	ld	r24, Z
     116:	91 81       	ldd	r25, Z+1	; 0x01
     118:	40 91 40 01 	lds	r20, 0x0140
     11c:	50 91 41 01 	lds	r21, 0x0141
     120:	60 91 42 01 	lds	r22, 0x0142
     124:	70 91 43 01 	lds	r23, 0x0143
     128:	aa 27       	eor	r26, r26
     12a:	97 fd       	sbrc	r25, 7
     12c:	a0 95       	com	r26
     12e:	ba 2f       	mov	r27, r26
     130:	84 0f       	add	r24, r20
     132:	95 1f       	adc	r25, r21
     134:	a6 1f       	adc	r26, r22
     136:	b7 1f       	adc	r27, r23
     138:	80 93 40 01 	sts	0x0140, r24
     13c:	90 93 41 01 	sts	0x0141, r25
     140:	a0 93 42 01 	sts	0x0142, r26
     144:	b0 93 43 01 	sts	0x0143, r27
		count_ADCL = ADCL;
		count_ADCH = ADCH;
		buffer_ADC1[counter_ADC1] = (count_ADCH << 8)|(count_ADCL);
		if(counter_ADC1 == 99)
		{
			for(int i = 0; i < 100; i++)
     148:	2f 5f       	subi	r18, 0xFF	; 255
     14a:	3f 4f       	sbci	r19, 0xFF	; 255
     14c:	24 36       	cpi	r18, 0x64	; 100
     14e:	31 05       	cpc	r19, r1
     150:	e1 f6       	brne	.-72     	; 0x10a <_ZN10CurrentADC13ADC_INTERRUPTEv+0x64>
			{
				summa += buffer_ADC1[i];
			}
			data_ADC1 = summa / 100;
     152:	60 91 40 01 	lds	r22, 0x0140
     156:	70 91 41 01 	lds	r23, 0x0141
     15a:	80 91 42 01 	lds	r24, 0x0142
     15e:	90 91 43 01 	lds	r25, 0x0143
     162:	24 e6       	ldi	r18, 0x64	; 100
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	40 e0       	ldi	r20, 0x00	; 0
     168:	50 e0       	ldi	r21, 0x00	; 0
     16a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__divmodsi4>
     16e:	30 93 03 01 	sts	0x0103, r19
     172:	20 93 02 01 	sts	0x0102, r18
			summa = 0;
     176:	10 92 40 01 	sts	0x0140, r1
     17a:	10 92 41 01 	sts	0x0141, r1
     17e:	10 92 42 01 	sts	0x0142, r1
     182:	10 92 43 01 	sts	0x0143, r1
			counter_ADC1 = 0;
     186:	10 92 47 01 	sts	0x0147, r1
     18a:	10 92 46 01 	sts	0x0146, r1
		}
		counter_ADC1++;
     18e:	80 91 46 01 	lds	r24, 0x0146
     192:	90 91 47 01 	lds	r25, 0x0147
     196:	01 96       	adiw	r24, 0x01	; 1
     198:	90 93 47 01 	sts	0x0147, r25
     19c:	80 93 46 01 	sts	0x0146, r24
		ADMUX |= (1 << MUX0);
     1a0:	ec e7       	ldi	r30, 0x7C	; 124
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	81 60       	ori	r24, 0x01	; 1
     1a8:	80 83       	st	Z, r24
     1aa:	82 c0       	rjmp	.+260    	; 0x2b0 <_ZN10CurrentADC13ADC_INTERRUPTEv+0x20a>
	}
	else if((ADMUX & (1 << MUX0)) == 1)
     1ac:	80 91 7c 00 	lds	r24, 0x007C
     1b0:	80 ff       	sbrs	r24, 0
     1b2:	7e c0       	rjmp	.+252    	; 0x2b0 <_ZN10CurrentADC13ADC_INTERRUPTEv+0x20a>
	{
		count_ADCL = ADCL;
     1b4:	80 91 78 00 	lds	r24, 0x0078
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	90 93 db 02 	sts	0x02DB, r25
     1be:	80 93 da 02 	sts	0x02DA, r24
		count_ADCH = ADCH;
     1c2:	80 91 79 00 	lds	r24, 0x0079
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	90 93 d9 02 	sts	0x02D9, r25
     1cc:	80 93 d8 02 	sts	0x02D8, r24
		buffer_ADC2[counter_ADC2] = (count_ADCH << 8)|(count_ADCL);
     1d0:	e0 91 44 01 	lds	r30, 0x0144
     1d4:	f0 91 45 01 	lds	r31, 0x0145
     1d8:	80 91 d8 02 	lds	r24, 0x02D8
     1dc:	90 91 d9 02 	lds	r25, 0x02D9
     1e0:	20 91 da 02 	lds	r18, 0x02DA
     1e4:	30 91 db 02 	lds	r19, 0x02DB
     1e8:	98 2f       	mov	r25, r24
     1ea:	88 27       	eor	r24, r24
     1ec:	82 2b       	or	r24, r18
     1ee:	93 2b       	or	r25, r19
     1f0:	ee 0f       	add	r30, r30
     1f2:	ff 1f       	adc	r31, r31
     1f4:	e8 5b       	subi	r30, 0xB8	; 184
     1f6:	fe 4f       	sbci	r31, 0xFE	; 254
     1f8:	91 83       	std	Z+1, r25	; 0x01
     1fa:	80 83       	st	Z, r24
		if(counter_ADC2 == 99)
     1fc:	80 91 44 01 	lds	r24, 0x0144
     200:	90 91 45 01 	lds	r25, 0x0145
     204:	83 36       	cpi	r24, 0x63	; 99
     206:	91 05       	cpc	r25, r1
     208:	09 f0       	breq	.+2      	; 0x20c <_ZN10CurrentADC13ADC_INTERRUPTEv+0x166>
     20a:	44 c0       	rjmp	.+136    	; 0x294 <_ZN10CurrentADC13ADC_INTERRUPTEv+0x1ee>
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e0       	ldi	r19, 0x00	; 0
		{
			for(int i = 0; i < 100; i++)
			{
				summa += buffer_ADC2[i];
     210:	f9 01       	movw	r30, r18
     212:	ee 0f       	add	r30, r30
     214:	ff 1f       	adc	r31, r31
     216:	e8 5b       	subi	r30, 0xB8	; 184
     218:	fe 4f       	sbci	r31, 0xFE	; 254
     21a:	80 81       	ld	r24, Z
     21c:	91 81       	ldd	r25, Z+1	; 0x01
     21e:	40 91 40 01 	lds	r20, 0x0140
     222:	50 91 41 01 	lds	r21, 0x0141
     226:	60 91 42 01 	lds	r22, 0x0142
     22a:	70 91 43 01 	lds	r23, 0x0143
     22e:	aa 27       	eor	r26, r26
     230:	97 fd       	sbrc	r25, 7
     232:	a0 95       	com	r26
     234:	ba 2f       	mov	r27, r26
     236:	84 0f       	add	r24, r20
     238:	95 1f       	adc	r25, r21
     23a:	a6 1f       	adc	r26, r22
     23c:	b7 1f       	adc	r27, r23
     23e:	80 93 40 01 	sts	0x0140, r24
     242:	90 93 41 01 	sts	0x0141, r25
     246:	a0 93 42 01 	sts	0x0142, r26
     24a:	b0 93 43 01 	sts	0x0143, r27
		count_ADCL = ADCL;
		count_ADCH = ADCH;
		buffer_ADC2[counter_ADC2] = (count_ADCH << 8)|(count_ADCL);
		if(counter_ADC2 == 99)
		{
			for(int i = 0; i < 100; i++)
     24e:	2f 5f       	subi	r18, 0xFF	; 255
     250:	3f 4f       	sbci	r19, 0xFF	; 255
     252:	24 36       	cpi	r18, 0x64	; 100
     254:	31 05       	cpc	r19, r1
     256:	e1 f6       	brne	.-72     	; 0x210 <_ZN10CurrentADC13ADC_INTERRUPTEv+0x16a>
			{
				summa += buffer_ADC2[i];
			}
			data_ADC2 = summa / 100;
     258:	60 91 40 01 	lds	r22, 0x0140
     25c:	70 91 41 01 	lds	r23, 0x0141
     260:	80 91 42 01 	lds	r24, 0x0142
     264:	90 91 43 01 	lds	r25, 0x0143
     268:	24 e6       	ldi	r18, 0x64	; 100
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	40 e0       	ldi	r20, 0x00	; 0
     26e:	50 e0       	ldi	r21, 0x00	; 0
     270:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__divmodsi4>
     274:	30 93 01 01 	sts	0x0101, r19
     278:	20 93 00 01 	sts	0x0100, r18
			summa = 0;
     27c:	10 92 40 01 	sts	0x0140, r1
     280:	10 92 41 01 	sts	0x0141, r1
     284:	10 92 42 01 	sts	0x0142, r1
     288:	10 92 43 01 	sts	0x0143, r1
			counter_ADC2 = 0;
     28c:	10 92 45 01 	sts	0x0145, r1
     290:	10 92 44 01 	sts	0x0144, r1
		}
		counter_ADC2++;
     294:	80 91 44 01 	lds	r24, 0x0144
     298:	90 91 45 01 	lds	r25, 0x0145
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	90 93 45 01 	sts	0x0145, r25
     2a2:	80 93 44 01 	sts	0x0144, r24
		ADMUX &= ~(1 << MUX0);
     2a6:	ec e7       	ldi	r30, 0x7C	; 124
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	8e 7f       	andi	r24, 0xFE	; 254
     2ae:	80 83       	st	Z, r24
	}
	
	ADCSRA |= (1 << ADSC);//запускаем очередное преобразование	
     2b0:	ea e7       	ldi	r30, 0x7A	; 122
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	80 64       	ori	r24, 0x40	; 64
     2b8:	80 83       	st	Z, r24
     2ba:	08 95       	ret

000002bc <_ZN10CurrentADC6getADCEh>:
}

int16_t CurrentADC::getADC(uint8_t group)
{
	switch(group)
     2bc:	66 23       	and	r22, r22
     2be:	19 f0       	breq	.+6      	; 0x2c6 <_ZN10CurrentADC6getADCEh+0xa>
     2c0:	61 30       	cpi	r22, 0x01	; 1
     2c2:	d1 f0       	breq	.+52     	; 0x2f8 <_ZN10CurrentADC6getADCEh+0x3c>
     2c4:	31 c0       	rjmp	.+98     	; 0x328 <_ZN10CurrentADC6getADCEh+0x6c>
	{
		case 0:
		current_ADC = fabs(26.4*(data_ADC1 - 512));
     2c6:	60 91 02 01 	lds	r22, 0x0102
     2ca:	70 91 03 01 	lds	r23, 0x0103
     2ce:	72 50       	subi	r23, 0x02	; 2
     2d0:	88 27       	eor	r24, r24
     2d2:	77 fd       	sbrc	r23, 7
     2d4:	80 95       	com	r24
     2d6:	98 2f       	mov	r25, r24
     2d8:	0e 94 be 06 	call	0xd7c	; 0xd7c <__floatsisf>
     2dc:	23 e3       	ldi	r18, 0x33	; 51
     2de:	33 e3       	ldi	r19, 0x33	; 51
     2e0:	43 ed       	ldi	r20, 0xD3	; 211
     2e2:	51 e4       	ldi	r21, 0x41	; 65
     2e4:	0e 94 22 07 	call	0xe44	; 0xe44 <__mulsf3>
     2e8:	9f 77       	andi	r25, 0x7F	; 127
     2ea:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixsfsi>
     2ee:	70 93 3f 01 	sts	0x013F, r23
     2f2:	60 93 3e 01 	sts	0x013E, r22
		break;
     2f6:	18 c0       	rjmp	.+48     	; 0x328 <_ZN10CurrentADC6getADCEh+0x6c>
		
		case 1:
		current_ADC = fabs(26.4*(data_ADC2 - 512));
     2f8:	60 91 00 01 	lds	r22, 0x0100
     2fc:	70 91 01 01 	lds	r23, 0x0101
     300:	72 50       	subi	r23, 0x02	; 2
     302:	88 27       	eor	r24, r24
     304:	77 fd       	sbrc	r23, 7
     306:	80 95       	com	r24
     308:	98 2f       	mov	r25, r24
     30a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__floatsisf>
     30e:	23 e3       	ldi	r18, 0x33	; 51
     310:	33 e3       	ldi	r19, 0x33	; 51
     312:	43 ed       	ldi	r20, 0xD3	; 211
     314:	51 e4       	ldi	r21, 0x41	; 65
     316:	0e 94 22 07 	call	0xe44	; 0xe44 <__mulsf3>
     31a:	9f 77       	andi	r25, 0x7F	; 127
     31c:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixsfsi>
     320:	70 93 3f 01 	sts	0x013F, r23
     324:	60 93 3e 01 	sts	0x013E, r22
		break;
	}
	return current_ADC;
     328:	80 91 3e 01 	lds	r24, 0x013E
     32c:	90 91 3f 01 	lds	r25, 0x013F
}
     330:	08 95       	ret

00000332 <_ZN4Uart8readByteEv>:
}


void Uart::readByte(void)
{
	currentByte = UDR0; //Считывание Uart
     332:	80 91 c6 00 	lds	r24, 0x00C6
     336:	80 93 28 01 	sts	0x0128, r24
	
	//Признак начала посылки
	if(currentByte == '<')
     33a:	80 91 28 01 	lds	r24, 0x0128
     33e:	8c 33       	cpi	r24, 0x3C	; 60
     340:	61 f4       	brne	.+24     	; 0x35a <_ZN4Uart8readByteEv+0x28>
	{
		counterRxBuff = 0;
     342:	10 92 29 01 	sts	0x0129, r1
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t i = 1; i < RX_BUFF_LENGTH; i++)
		{
			rxBuff[i] = 0;
     34a:	fc 01       	movw	r30, r24
     34c:	e6 5d       	subi	r30, 0xD6	; 214
     34e:	fe 4f       	sbci	r31, 0xFE	; 254
     350:	10 82       	st	Z, r1
     352:	01 96       	adiw	r24, 0x01	; 1
	
	//Признак начала посылки
	if(currentByte == '<')
	{
		counterRxBuff = 0;
		for(uint8_t i = 1; i < RX_BUFF_LENGTH; i++)
     354:	84 31       	cpi	r24, 0x14	; 20
     356:	91 05       	cpc	r25, r1
     358:	c1 f7       	brne	.-16     	; 0x34a <_ZN4Uart8readByteEv+0x18>
			rxBuff[i] = 0;
		}
	}
	
	//Заполнение буфера
	if(counterRxBuff < RX_BUFF_LENGTH)
     35a:	80 91 29 01 	lds	r24, 0x0129
     35e:	84 31       	cpi	r24, 0x14	; 20
     360:	70 f4       	brcc	.+28     	; 0x37e <_ZN4Uart8readByteEv+0x4c>
	{
		rxBuff[counterRxBuff] = currentByte;
     362:	e0 91 29 01 	lds	r30, 0x0129
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 91 28 01 	lds	r24, 0x0128
     36c:	e6 5d       	subi	r30, 0xD6	; 214
     36e:	fe 4f       	sbci	r31, 0xFE	; 254
     370:	80 83       	st	Z, r24
		counterRxBuff++;
     372:	80 91 29 01 	lds	r24, 0x0129
     376:	8f 5f       	subi	r24, 0xFF	; 255
     378:	80 93 29 01 	sts	0x0129, r24
     37c:	08 95       	ret
			rxBuff[i] = 0;
		}
	}
	
	//Заполнение буфера
	if(counterRxBuff < RX_BUFF_LENGTH)
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
	//Очистка буфера при переполнении
	else
	{
		for(uint8_t i = 0; i < RX_BUFF_LENGTH; i++)
		{
			rxBuff[i] = 0;
     382:	fc 01       	movw	r30, r24
     384:	e6 5d       	subi	r30, 0xD6	; 214
     386:	fe 4f       	sbci	r31, 0xFE	; 254
     388:	10 82       	st	Z, r1
     38a:	01 96       	adiw	r24, 0x01	; 1
	}
	
	//Очистка буфера при переполнении
	else
	{
		for(uint8_t i = 0; i < RX_BUFF_LENGTH; i++)
     38c:	84 31       	cpi	r24, 0x14	; 20
     38e:	91 05       	cpc	r25, r1
     390:	c1 f7       	brne	.-16     	; 0x382 <_ZN4Uart8readByteEv+0x50>
		{
			rxBuff[i] = 0;
		}
		counterRxBuff = 0;
     392:	10 92 29 01 	sts	0x0129, r1
     396:	08 95       	ret

00000398 <_ZN4Uart13readRxCommandEv>:
	}
}

uint8_t Uart::readRxCommand(void)
{			
     398:	6f 92       	push	r6
     39a:	7f 92       	push	r7
     39c:	8f 92       	push	r8
     39e:	9f 92       	push	r9
     3a0:	af 92       	push	r10
     3a2:	bf 92       	push	r11
     3a4:	cf 92       	push	r12
     3a6:	df 92       	push	r13
     3a8:	ef 92       	push	r14
     3aa:	ff 92       	push	r15
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	dc 01       	movw	r26, r24
     3b6:	21 e0       	ldi	r18, 0x01	; 1
     3b8:	30 e0       	ldi	r19, 0x00	; 0
			{
				settings[0] = rxBuff[2] << 8 | rxBuff[3];
				settings[1] = rxBuff[4] << 8 | rxBuff[5];
				settings[2] = rxBuff[6] << 8 | rxBuff[7];
			}
			uartCommand = COM_SW;
     3ba:	0f 2e       	mov	r0, r31
     3bc:	f6 e0       	ldi	r31, 0x06	; 6
     3be:	ff 2e       	mov	r15, r31
     3c0:	f0 2d       	mov	r31, r0
		
		else if((rxBuff[i] == '<') && (rxBuff[i+9] == '>'))
		{
			if((rxBuff[i+1] == 'P') && (rxBuff[i+8] == 'p'))
			{
				settings[0] = rxBuff[2] << 8 | rxBuff[3];
     3c2:	0c e2       	ldi	r16, 0x2C	; 44
     3c4:	11 e0       	ldi	r17, 0x01	; 1
     3c6:	6d e2       	ldi	r22, 0x2D	; 45
     3c8:	71 e0       	ldi	r23, 0x01	; 1
				settings[1] = rxBuff[4] << 8 | rxBuff[5];
     3ca:	8e e2       	ldi	r24, 0x2E	; 46
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	cf e2       	ldi	r28, 0x2F	; 47
     3d0:	d1 e0       	ldi	r29, 0x01	; 1
				settings[2] = rxBuff[6] << 8 | rxBuff[7];
     3d2:	0f 2e       	mov	r0, r31
     3d4:	f0 e3       	ldi	r31, 0x30	; 48
     3d6:	8f 2e       	mov	r8, r31
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
     3da:	9f 2e       	mov	r9, r31
     3dc:	f0 2d       	mov	r31, r0
     3de:	0f 2e       	mov	r0, r31
     3e0:	f1 e3       	ldi	r31, 0x31	; 49
     3e2:	6f 2e       	mov	r6, r31
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	7f 2e       	mov	r7, r31
     3e8:	f0 2d       	mov	r31, r0
				case 'Q':
				uartCommand = COM_Q;
				break;
				
				case 'S':
				uartCommand = COM_SR;
     3ea:	0f 2e       	mov	r0, r31
     3ec:	f7 e0       	ldi	r31, 0x07	; 7
     3ee:	bf 2e       	mov	r11, r31
     3f0:	f0 2d       	mov	r31, r0
				case '2':
				uartCommand = COM_2;
				break;
				
				case 'Q':
				uartCommand = COM_Q;
     3f2:	0f 2e       	mov	r0, r31
     3f4:	f5 e0       	ldi	r31, 0x05	; 5
     3f6:	cf 2e       	mov	r12, r31
     3f8:	f0 2d       	mov	r31, r0
		if((rxBuff[i] == '<') && (rxBuff[i+2] == '>'))
		{
			switch(rxBuff[i+1])
			{
				case '1':
				uartCommand = COM_1;
     3fa:	dd 24       	eor	r13, r13
     3fc:	d3 94       	inc	r13
				break;
				
				case '2':
				uartCommand = COM_2;
     3fe:	68 94       	set
     400:	ee 24       	eor	r14, r14
     402:	e1 f8       	bld	r14, 1
     404:	a9 01       	movw	r20, r18
     406:	41 50       	subi	r20, 0x01	; 1
     408:	51 09       	sbc	r21, r1

uint8_t Uart::readRxCommand(void)
{			
	for(uint8_t i = 0; i < RX_BUFF_LENGTH; i++)
	{
		if((rxBuff[i] == '<') && (rxBuff[i+2] == '>'))
     40a:	fa 01       	movw	r30, r20
     40c:	e6 5d       	subi	r30, 0xD6	; 214
     40e:	fe 4f       	sbci	r31, 0xFE	; 254
     410:	e0 81       	ld	r30, Z
     412:	ec 33       	cpi	r30, 0x3C	; 60
     414:	99 f5       	brne	.+102    	; 0x47c <_ZN4Uart13readRxCommandEv+0xe4>
     416:	f9 01       	movw	r30, r18
     418:	e5 5d       	subi	r30, 0xD5	; 213
     41a:	fe 4f       	sbci	r31, 0xFE	; 254
     41c:	e0 81       	ld	r30, Z
     41e:	ee 33       	cpi	r30, 0x3E	; 62
     420:	69 f5       	brne	.+90     	; 0x47c <_ZN4Uart13readRxCommandEv+0xe4>
     422:	1d c0       	rjmp	.+58     	; 0x45e <_ZN4Uart13readRxCommandEv+0xc6>
		{
			switch(rxBuff[i+1])
			{
				case '1':
				uartCommand = COM_1;
     424:	dc 92       	st	X, r13
				break;
     426:	14 c0       	rjmp	.+40     	; 0x450 <_ZN4Uart13readRxCommandEv+0xb8>
				
				case '2':
				uartCommand = COM_2;
     428:	ec 92       	st	X, r14
				break;
     42a:	12 c0       	rjmp	.+36     	; 0x450 <_ZN4Uart13readRxCommandEv+0xb8>
				
				case 'Q':
				uartCommand = COM_Q;
     42c:	cc 92       	st	X, r12
				break;
     42e:	10 c0       	rjmp	.+32     	; 0x450 <_ZN4Uart13readRxCommandEv+0xb8>
				
				case 'S':
				uartCommand = COM_SR;
     430:	bc 92       	st	X, r11
				break;
     432:	0e c0       	rjmp	.+28     	; 0x450 <_ZN4Uart13readRxCommandEv+0xb8>
			}
		}
		
		else if((rxBuff[i] == '<') && (rxBuff[i+9] == '>'))
     434:	f9 01       	movw	r30, r18
     436:	ee 5c       	subi	r30, 0xCE	; 206
     438:	fe 4f       	sbci	r31, 0xFE	; 254
     43a:	40 81       	ld	r20, Z
     43c:	4e 33       	cpi	r20, 0x3E	; 62
     43e:	41 f4       	brne	.+16     	; 0x450 <_ZN4Uart13readRxCommandEv+0xb8>
     440:	24 c0       	rjmp	.+72     	; 0x48a <_ZN4Uart13readRxCommandEv+0xf2>
		{
			if((rxBuff[i+1] == 'P') && (rxBuff[i+8] == 'p'))
     442:	f9 01       	movw	r30, r18
     444:	ef 5c       	subi	r30, 0xCF	; 207
     446:	fe 4f       	sbci	r31, 0xFE	; 254
     448:	40 81       	ld	r20, Z
     44a:	40 37       	cpi	r20, 0x70	; 112
     44c:	29 f1       	breq	.+74     	; 0x498 <_ZN4Uart13readRxCommandEv+0x100>
			{
				settings[0] = rxBuff[2] << 8 | rxBuff[3];
				settings[1] = rxBuff[4] << 8 | rxBuff[5];
				settings[2] = rxBuff[6] << 8 | rxBuff[7];
			}
			uartCommand = COM_SW;
     44e:	fc 92       	st	X, r15
     450:	2f 5f       	subi	r18, 0xFF	; 255
     452:	3f 4f       	sbci	r19, 0xFF	; 255
	}
}

uint8_t Uart::readRxCommand(void)
{			
	for(uint8_t i = 0; i < RX_BUFF_LENGTH; i++)
     454:	25 31       	cpi	r18, 0x15	; 21
     456:	31 05       	cpc	r19, r1
     458:	a9 f6       	brne	.-86     	; 0x404 <_ZN4Uart13readRxCommandEv+0x6c>
			}
			uartCommand = COM_SW;
		}
		
	}
	return uartCommand;	
     45a:	8c 91       	ld	r24, X
     45c:	3b c0       	rjmp	.+118    	; 0x4d4 <_ZN4Uart13readRxCommandEv+0x13c>
{			
	for(uint8_t i = 0; i < RX_BUFF_LENGTH; i++)
	{
		if((rxBuff[i] == '<') && (rxBuff[i+2] == '>'))
		{
			switch(rxBuff[i+1])
     45e:	f9 01       	movw	r30, r18
     460:	e6 5d       	subi	r30, 0xD6	; 214
     462:	fe 4f       	sbci	r31, 0xFE	; 254
     464:	40 81       	ld	r20, Z
     466:	42 33       	cpi	r20, 0x32	; 50
     468:	f9 f2       	breq	.-66     	; 0x428 <_ZN4Uart13readRxCommandEv+0x90>
     46a:	18 f4       	brcc	.+6      	; 0x472 <_ZN4Uart13readRxCommandEv+0xda>
     46c:	41 33       	cpi	r20, 0x31	; 49
     46e:	d1 f2       	breq	.-76     	; 0x424 <_ZN4Uart13readRxCommandEv+0x8c>
     470:	ef cf       	rjmp	.-34     	; 0x450 <_ZN4Uart13readRxCommandEv+0xb8>
     472:	41 35       	cpi	r20, 0x51	; 81
     474:	d9 f2       	breq	.-74     	; 0x42c <_ZN4Uart13readRxCommandEv+0x94>
     476:	43 35       	cpi	r20, 0x53	; 83
     478:	d9 f2       	breq	.-74     	; 0x430 <_ZN4Uart13readRxCommandEv+0x98>
     47a:	ea cf       	rjmp	.-44     	; 0x450 <_ZN4Uart13readRxCommandEv+0xb8>
				uartCommand = COM_SR;
				break;
			}
		}
		
		else if((rxBuff[i] == '<') && (rxBuff[i+9] == '>'))
     47c:	fa 01       	movw	r30, r20
     47e:	e6 5d       	subi	r30, 0xD6	; 214
     480:	fe 4f       	sbci	r31, 0xFE	; 254
     482:	40 81       	ld	r20, Z
     484:	4c 33       	cpi	r20, 0x3C	; 60
     486:	21 f7       	brne	.-56     	; 0x450 <_ZN4Uart13readRxCommandEv+0xb8>
     488:	d5 cf       	rjmp	.-86     	; 0x434 <_ZN4Uart13readRxCommandEv+0x9c>
		{
			if((rxBuff[i+1] == 'P') && (rxBuff[i+8] == 'p'))
     48a:	f9 01       	movw	r30, r18
     48c:	e6 5d       	subi	r30, 0xD6	; 214
     48e:	fe 4f       	sbci	r31, 0xFE	; 254
     490:	40 81       	ld	r20, Z
     492:	40 35       	cpi	r20, 0x50	; 80
     494:	e1 f6       	brne	.-72     	; 0x44e <_ZN4Uart13readRxCommandEv+0xb6>
     496:	d5 cf       	rjmp	.-86     	; 0x442 <_ZN4Uart13readRxCommandEv+0xaa>
			{
				settings[0] = rxBuff[2] << 8 | rxBuff[3];
     498:	f8 01       	movw	r30, r16
     49a:	a0 80       	ld	r10, Z
     49c:	fb 01       	movw	r30, r22
     49e:	40 81       	ld	r20, Z
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	5a 29       	or	r21, r10
     4a4:	18 96       	adiw	r26, 0x08	; 8
     4a6:	5c 93       	st	X, r21
     4a8:	4e 93       	st	-X, r20
     4aa:	17 97       	sbiw	r26, 0x07	; 7
				settings[1] = rxBuff[4] << 8 | rxBuff[5];
     4ac:	fc 01       	movw	r30, r24
     4ae:	a0 80       	ld	r10, Z
     4b0:	48 81       	ld	r20, Y
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	5a 29       	or	r21, r10
     4b6:	1a 96       	adiw	r26, 0x0a	; 10
     4b8:	5c 93       	st	X, r21
     4ba:	4e 93       	st	-X, r20
     4bc:	19 97       	sbiw	r26, 0x09	; 9
				settings[2] = rxBuff[6] << 8 | rxBuff[7];
     4be:	f4 01       	movw	r30, r8
     4c0:	a0 80       	ld	r10, Z
     4c2:	f3 01       	movw	r30, r6
     4c4:	40 81       	ld	r20, Z
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	5a 29       	or	r21, r10
     4ca:	1c 96       	adiw	r26, 0x0c	; 12
     4cc:	5c 93       	st	X, r21
     4ce:	4e 93       	st	-X, r20
     4d0:	1b 97       	sbiw	r26, 0x0b	; 11
     4d2:	bd cf       	rjmp	.-134    	; 0x44e <_ZN4Uart13readRxCommandEv+0xb6>
			uartCommand = COM_SW;
		}
		
	}
	return uartCommand;	
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	7f 90       	pop	r7
     4ee:	6f 90       	pop	r6
     4f0:	08 95       	ret

000004f2 <_ZN4Uart10sendTxBuffEPc>:

void Uart::sendTxBuff(char *txBuff)
{
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
	for(uint8_t i = 0; txBuff[i] != '\0'; i++)
     4f6:	fb 01       	movw	r30, r22
     4f8:	90 81       	ld	r25, Z
     4fa:	99 23       	and	r25, r25
     4fc:	81 f0       	breq	.+32     	; 0x51e <_ZN4Uart10sendTxBuffEPc+0x2c>
     4fe:	20 e0       	ldi	r18, 0x00	; 0
	{
		while(!(UCSR0A & (1<<UDRE0)));
     500:	e0 ec       	ldi	r30, 0xC0	; 192
     502:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = txBuff[i];
     504:	c6 ec       	ldi	r28, 0xC6	; 198
     506:	d0 e0       	ldi	r29, 0x00	; 0

void Uart::sendTxBuff(char *txBuff)
{
	for(uint8_t i = 0; txBuff[i] != '\0'; i++)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     508:	80 81       	ld	r24, Z
     50a:	85 ff       	sbrs	r24, 5
     50c:	fd cf       	rjmp	.-6      	; 0x508 <_ZN4Uart10sendTxBuffEPc+0x16>
		UDR0 = txBuff[i];
     50e:	98 83       	st	Y, r25
	return uartCommand;	
}

void Uart::sendTxBuff(char *txBuff)
{
	for(uint8_t i = 0; txBuff[i] != '\0'; i++)
     510:	2f 5f       	subi	r18, 0xFF	; 255
     512:	db 01       	movw	r26, r22
     514:	a2 0f       	add	r26, r18
     516:	b1 1d       	adc	r27, r1
     518:	9c 91       	ld	r25, X
     51a:	91 11       	cpse	r25, r1
     51c:	f5 cf       	rjmp	.-22     	; 0x508 <_ZN4Uart10sendTxBuffEPc+0x16>
	{
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = txBuff[i];
	}
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <_ZN4Uart10sendTxBuffEiah>:

void Uart::sendTxBuff(int16_t currentData, int8_t rotate, uint8_t group)
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	ec 01       	movw	r28, r24
	switch(group)
     52a:	21 30       	cpi	r18, 0x01	; 1
     52c:	19 f0       	breq	.+6      	; 0x534 <_ZN4Uart10sendTxBuffEiah+0x10>
     52e:	22 30       	cpi	r18, 0x02	; 2
     530:	59 f0       	breq	.+22     	; 0x548 <_ZN4Uart10sendTxBuffEiah+0x24>
     532:	24 c0       	rjmp	.+72     	; 0x57c <_ZN4Uart10sendTxBuffEiah+0x58>
	{
		case 1:
		data[0] = '<'; data[1] = '1'; data[2] = (currentData >> 8); data[3] = currentData; data[4] = rotate; data[5] = '>';
     534:	8c e3       	ldi	r24, 0x3C	; 60
     536:	89 83       	std	Y+1, r24	; 0x01
     538:	81 e3       	ldi	r24, 0x31	; 49
     53a:	8a 83       	std	Y+2, r24	; 0x02
     53c:	7b 83       	std	Y+3, r23	; 0x03
     53e:	6c 83       	std	Y+4, r22	; 0x04
     540:	4d 83       	std	Y+5, r20	; 0x05
     542:	8e e3       	ldi	r24, 0x3E	; 62
     544:	8e 83       	std	Y+6, r24	; 0x06
		break;
     546:	1a c0       	rjmp	.+52     	; 0x57c <_ZN4Uart10sendTxBuffEiah+0x58>
		
		case 2:
		data[0] = '<'; data[1] = '2'; data[2] = (currentData >> 8); data[3] = currentData; data[4] = rotate; data[5] = '>';
     548:	8c e3       	ldi	r24, 0x3C	; 60
     54a:	89 83       	std	Y+1, r24	; 0x01
     54c:	82 e3       	ldi	r24, 0x32	; 50
     54e:	8a 83       	std	Y+2, r24	; 0x02
     550:	7b 83       	std	Y+3, r23	; 0x03
     552:	6c 83       	std	Y+4, r22	; 0x04
     554:	4d 83       	std	Y+5, r20	; 0x05
     556:	8e e3       	ldi	r24, 0x3E	; 62
     558:	8e 83       	std	Y+6, r24	; 0x06
		break;
     55a:	10 c0       	rjmp	.+32     	; 0x57c <_ZN4Uart10sendTxBuffEiah+0x58>
	}

	for(uint8_t i = 0; i < 6; i++)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     55c:	40 81       	ld	r20, Z
     55e:	45 ff       	sbrs	r20, 5
     560:	fd cf       	rjmp	.-6      	; 0x55c <_ZN4Uart10sendTxBuffEiah+0x38>
		UDR0 = data[i];
     562:	de 01       	movw	r26, r28
     564:	a2 0f       	add	r26, r18
     566:	b3 1f       	adc	r27, r19
     568:	11 96       	adiw	r26, 0x01	; 1
     56a:	4c 91       	ld	r20, X
     56c:	dc 01       	movw	r26, r24
     56e:	4c 93       	st	X, r20
     570:	2f 5f       	subi	r18, 0xFF	; 255
     572:	3f 4f       	sbci	r19, 0xFF	; 255
		case 2:
		data[0] = '<'; data[1] = '2'; data[2] = (currentData >> 8); data[3] = currentData; data[4] = rotate; data[5] = '>';
		break;
	}

	for(uint8_t i = 0; i < 6; i++)
     574:	26 30       	cpi	r18, 0x06	; 6
     576:	31 05       	cpc	r19, r1
     578:	89 f7       	brne	.-30     	; 0x55c <_ZN4Uart10sendTxBuffEiah+0x38>
     57a:	07 c0       	rjmp	.+14     	; 0x58a <_ZN4Uart10sendTxBuffEiah+0x66>
		UDR0 = txBuff[i];
	}
}

void Uart::sendTxBuff(int16_t currentData, int8_t rotate, uint8_t group)
{
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
		break;
	}

	for(uint8_t i = 0; i < 6; i++)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     580:	e0 ec       	ldi	r30, 0xC0	; 192
     582:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data[i];
     584:	86 ec       	ldi	r24, 0xC6	; 198
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	e9 cf       	rjmp	.-46     	; 0x55c <_ZN4Uart10sendTxBuffEiah+0x38>
	}
}
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <_ZN4Uart11clearRxBuffEv>:

void Uart::clearRxBuff(void)
{
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i = 0; i < RX_BUFF_LENGTH; i++)
	{
		rxBuff[i] = 0;
     594:	f9 01       	movw	r30, r18
     596:	e6 5d       	subi	r30, 0xD6	; 214
     598:	fe 4f       	sbci	r31, 0xFE	; 254
     59a:	10 82       	st	Z, r1
     59c:	2f 5f       	subi	r18, 0xFF	; 255
     59e:	3f 4f       	sbci	r19, 0xFF	; 255
	}
}

void Uart::clearRxBuff(void)
{
	for(uint8_t i = 0; i < RX_BUFF_LENGTH; i++)
     5a0:	24 31       	cpi	r18, 0x14	; 20
     5a2:	31 05       	cpc	r19, r1
     5a4:	b9 f7       	brne	.-18     	; 0x594 <_ZN4Uart11clearRxBuffEv+0x4>
	{
		rxBuff[i] = 0;
	}
	uartCommand = COM_NO;
     5a6:	fc 01       	movw	r30, r24
     5a8:	10 82       	st	Z, r1
     5aa:	08 95       	ret

000005ac <_ZN7Buttons11initButtonsEv>:
bool Buttons::buttonState[2] = {false, false};
bool Buttons::was = false;

void Buttons::initButtons(void)
{
	BUTTONS_PORT |= (1 << BUTTON_ONE)|(1 << BUTTON_TWO);
     5ac:	8b b1       	in	r24, 0x0b	; 11
     5ae:	80 6c       	ori	r24, 0xC0	; 192
     5b0:	8b b9       	out	0x0b, r24	; 11
	BUTTONS_DDR &= ~((1 << BUTTON_ONE)|(1 << BUTTON_TWO));
     5b2:	8a b1       	in	r24, 0x0a	; 10
     5b4:	8f 73       	andi	r24, 0x3F	; 63
     5b6:	8a b9       	out	0x0a, r24	; 10
     5b8:	08 95       	ret

000005ba <_ZN7Buttons9initMotorEv>:
}

void Buttons::initMotor(void)
{
	MOTOR_DDR |= (1 << LEFT_OUT_1_2)|(1 << LEFT_OUT_2_2)|(1 << RIGHT_OUT_1_1)|(1 << RIGHT_OUT_2_1)|(1 << EN_OUT_1)|(1 << EN_OUT_2);
     5ba:	84 b1       	in	r24, 0x04	; 4
     5bc:	8f 63       	ori	r24, 0x3F	; 63
     5be:	84 b9       	out	0x04, r24	; 4
	MOTOR_PORT &= ~((1 << LEFT_OUT_1_2)|(1 << LEFT_OUT_2_2)|(1 << RIGHT_OUT_1_1)|(1 << RIGHT_OUT_2_1)|(1 << EN_OUT_1)|(1 << EN_OUT_2));
     5c0:	85 b1       	in	r24, 0x05	; 5
     5c2:	80 7c       	andi	r24, 0xC0	; 192
     5c4:	85 b9       	out	0x05, r24	; 5
     5c6:	08 95       	ret

000005c8 <_ZN7Buttons10initTimer0Ev>:
}

void Buttons::initTimer0(void)
{
	TCCR0B |= (1 << CS02)|(0 << CS01)|(1 << CS00);
     5c8:	85 b5       	in	r24, 0x25	; 37
     5ca:	85 60       	ori	r24, 0x05	; 5
     5cc:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);
     5ce:	ee e6       	ldi	r30, 0x6E	; 110
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	81 60       	ori	r24, 0x01	; 1
     5d6:	80 83       	st	Z, r24
     5d8:	08 95       	ret

000005da <_ZN7Buttons17checkButtonsStateEv>:
}

void Buttons::checkButtonsState(void)
{
	if(((BUTTONS_PIN & (1 << BUTTON_ONE)) == (0 << BUTTON_ONE)) && ((BUTTONS_PIN & (1 << BUTTON_TWO)) == (1 << BUTTON_TWO)))
     5da:	4e 99       	sbic	0x09, 6	; 9
     5dc:	2c c0       	rjmp	.+88     	; 0x636 <_ZN7Buttons17checkButtonsStateEv+0x5c>
     5de:	4f 9b       	sbis	0x09, 7	; 9
     5e0:	2a c0       	rjmp	.+84     	; 0x636 <_ZN7Buttons17checkButtonsStateEv+0x5c>
     5e2:	2c c0       	rjmp	.+88     	; 0x63c <_ZN7Buttons17checkButtonsStateEv+0x62>
	{
		timerTwo = 0;
		timerOne++;
		if((timerOne > 8) && (was == false) && (buttonState[1] == false))
     5e4:	80 91 23 01 	lds	r24, 0x0123
     5e8:	81 11       	cpse	r24, r1
     5ea:	42 c0       	rjmp	.+132    	; 0x670 <_ZN7Buttons17checkButtonsStateEv+0x96>
     5ec:	80 91 25 01 	lds	r24, 0x0125
     5f0:	81 11       	cpse	r24, r1
     5f2:	3e c0       	rjmp	.+124    	; 0x670 <_ZN7Buttons17checkButtonsStateEv+0x96>
		{
			buttonState[0] = !buttonState[0]; 
     5f4:	e4 e2       	ldi	r30, 0x24	; 36
     5f6:	f1 e0       	ldi	r31, 0x01	; 1
     5f8:	90 81       	ld	r25, Z
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	98 27       	eor	r25, r24
     5fe:	90 83       	st	Z, r25
			timerOne = 0;
     600:	10 92 27 01 	sts	0x0127, r1
			was = true;
     604:	80 93 23 01 	sts	0x0123, r24
     608:	08 95       	ret
		}
	}
	
	else if(((BUTTONS_PIN & (1 << BUTTON_ONE)) == (1 << BUTTON_ONE)) && ((BUTTONS_PIN & (1 << BUTTON_TWO)) == (0 << BUTTON_TWO)))
     60a:	4f 9b       	sbis	0x09, 7	; 9
     60c:	21 c0       	rjmp	.+66     	; 0x650 <_ZN7Buttons17checkButtonsStateEv+0x76>
     60e:	2a c0       	rjmp	.+84     	; 0x664 <_ZN7Buttons17checkButtonsStateEv+0x8a>
	{
		timerOne = 0;
		timerTwo++;
		if((timerTwo > 8) && (was == false) && (buttonState[0] == false))
     610:	80 91 23 01 	lds	r24, 0x0123
     614:	81 11       	cpse	r24, r1
     616:	2c c0       	rjmp	.+88     	; 0x670 <_ZN7Buttons17checkButtonsStateEv+0x96>
     618:	80 91 24 01 	lds	r24, 0x0124
     61c:	81 11       	cpse	r24, r1
     61e:	28 c0       	rjmp	.+80     	; 0x670 <_ZN7Buttons17checkButtonsStateEv+0x96>
		{
			buttonState[1] = !buttonState[1];
     620:	e5 e2       	ldi	r30, 0x25	; 37
     622:	f1 e0       	ldi	r31, 0x01	; 1
     624:	90 81       	ld	r25, Z
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	98 27       	eor	r25, r24
     62a:	90 83       	st	Z, r25
			timerTwo = 0;
     62c:	10 92 26 01 	sts	0x0126, r1
			was = true;
     630:	80 93 23 01 	sts	0x0123, r24
     634:	08 95       	ret
			timerOne = 0;
			was = true;
		}
	}
	
	else if(((BUTTONS_PIN & (1 << BUTTON_ONE)) == (1 << BUTTON_ONE)) && ((BUTTONS_PIN & (1 << BUTTON_TWO)) == (0 << BUTTON_TWO)))
     636:	4e 99       	sbic	0x09, 6	; 9
     638:	e8 cf       	rjmp	.-48     	; 0x60a <_ZN7Buttons17checkButtonsStateEv+0x30>
     63a:	14 c0       	rjmp	.+40     	; 0x664 <_ZN7Buttons17checkButtonsStateEv+0x8a>

void Buttons::checkButtonsState(void)
{
	if(((BUTTONS_PIN & (1 << BUTTON_ONE)) == (0 << BUTTON_ONE)) && ((BUTTONS_PIN & (1 << BUTTON_TWO)) == (1 << BUTTON_TWO)))
	{
		timerTwo = 0;
     63c:	10 92 26 01 	sts	0x0126, r1
		timerOne++;
     640:	80 91 27 01 	lds	r24, 0x0127
     644:	8f 5f       	subi	r24, 0xFF	; 255
     646:	80 93 27 01 	sts	0x0127, r24
		if((timerOne > 8) && (was == false) && (buttonState[1] == false))
     64a:	89 30       	cpi	r24, 0x09	; 9
     64c:	58 f6       	brcc	.-106    	; 0x5e4 <_ZN7Buttons17checkButtonsStateEv+0xa>
     64e:	08 95       	ret
		}
	}
	
	else if(((BUTTONS_PIN & (1 << BUTTON_ONE)) == (1 << BUTTON_ONE)) && ((BUTTONS_PIN & (1 << BUTTON_TWO)) == (0 << BUTTON_TWO)))
	{
		timerOne = 0;
     650:	10 92 27 01 	sts	0x0127, r1
		timerTwo++;
     654:	80 91 26 01 	lds	r24, 0x0126
     658:	8f 5f       	subi	r24, 0xFF	; 255
     65a:	80 93 26 01 	sts	0x0126, r24
		if((timerTwo > 8) && (was == false) && (buttonState[0] == false))
     65e:	89 30       	cpi	r24, 0x09	; 9
     660:	b8 f6       	brcc	.-82     	; 0x610 <_ZN7Buttons17checkButtonsStateEv+0x36>
     662:	08 95       	ret
		}
	}
	
	else
	{
		was = false;
     664:	10 92 23 01 	sts	0x0123, r1
		timerOne = 0;
     668:	10 92 27 01 	sts	0x0127, r1
		timerTwo = 0;
     66c:	10 92 26 01 	sts	0x0126, r1
     670:	08 95       	ret

00000672 <_ZN7Buttons11motorRotateEh>:
	return buttonState[number];
}

void Buttons::motorRotate(uint8_t direction)
{
	switch(direction)
     672:	66 23       	and	r22, r22
     674:	19 f0       	breq	.+6      	; 0x67c <_ZN7Buttons11motorRotateEh+0xa>
     676:	61 30       	cpi	r22, 0x01	; 1
     678:	41 f0       	breq	.+16     	; 0x68a <_ZN7Buttons11motorRotateEh+0x18>
     67a:	08 95       	ret
	{
		case 0:
			MOTOR_PORT &= ~((1 << LEFT_OUT_1_2)|(1 << LEFT_OUT_2_2));
     67c:	85 b1       	in	r24, 0x05	; 5
     67e:	8d 7e       	andi	r24, 0xED	; 237
     680:	85 b9       	out	0x05, r24	; 5
			MOTOR_PORT |= (1 << RIGHT_OUT_1_1)|(1 << RIGHT_OUT_2_1);
     682:	85 b1       	in	r24, 0x05	; 5
     684:	81 62       	ori	r24, 0x21	; 33
     686:	85 b9       	out	0x05, r24	; 5
			break;
     688:	08 95       	ret
			
		case 1:
			MOTOR_PORT &= ~((1 << RIGHT_OUT_1_1)|(1 << RIGHT_OUT_2_1));
     68a:	85 b1       	in	r24, 0x05	; 5
     68c:	8e 7d       	andi	r24, 0xDE	; 222
     68e:	85 b9       	out	0x05, r24	; 5
			MOTOR_PORT |= (1 << LEFT_OUT_1_2)|(1 << LEFT_OUT_2_2);
     690:	85 b1       	in	r24, 0x05	; 5
     692:	82 61       	ori	r24, 0x12	; 18
     694:	85 b9       	out	0x05, r24	; 5
     696:	08 95       	ret

00000698 <_ZN7Buttons9motorStopEv>:
	
}

void Buttons::motorStop(void)
{
	MOTOR_PORT &= ~((1 << LEFT_OUT_1_2)|(1 << LEFT_OUT_2_2));
     698:	85 b1       	in	r24, 0x05	; 5
     69a:	8d 7e       	andi	r24, 0xED	; 237
     69c:	85 b9       	out	0x05, r24	; 5
	MOTOR_PORT &= ~((1 << RIGHT_OUT_1_1)|(1 << RIGHT_OUT_2_1));
     69e:	85 b1       	in	r24, 0x05	; 5
     6a0:	8e 7d       	andi	r24, 0xDE	; 222
     6a2:	85 b9       	out	0x05, r24	; 5
     6a4:	08 95       	ret

000006a6 <_ZN7Buttons11enableMotorEv>:
}

void Buttons::enableMotor(void)
{
	MOTOR_PORT |= (1 << EN_OUT_1)|(1 << EN_OUT_2);
     6a6:	85 b1       	in	r24, 0x05	; 5
     6a8:	8c 60       	ori	r24, 0x0C	; 12
     6aa:	85 b9       	out	0x05, r24	; 5
     6ac:	08 95       	ret

000006ae <_ZN7Buttons12disableMotorEv>:
}

void Buttons::disableMotor(void)
{
	MOTOR_PORT &= ~((1 << EN_OUT_1)|(1 << EN_OUT_2));
     6ae:	85 b1       	in	r24, 0x05	; 5
     6b0:	83 7f       	andi	r24, 0xF3	; 243
     6b2:	85 b9       	out	0x05, r24	; 5
     6b4:	08 95       	ret

000006b6 <_ZN8Settings13writeToEepromEPj>:
﻿#include "Settings.h"
#include <avr/io.h>
#include <avr/eeprom.h>

void Settings::writeToEeprom(uint16_t* data)
{
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	eb 01       	movw	r28, r22
	for(uint8_t i = 0; i < 3; i++)
	{
		for(uint8_t j = i*6; j < i*6+6; j+=2)
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	10 e0       	ldi	r17, 0x00	; 0
		{
			eeprom_write_word((uint16_t*)j, *(data + i));
     6c8:	68 81       	ld	r22, Y
     6ca:	79 81       	ldd	r23, Y+1	; 0x01
     6cc:	0e 94 fc 07 	call	0xff8	; 0xff8 <__eewr_word_m328p>

void Settings::writeToEeprom(uint16_t* data)
{
	for(uint8_t i = 0; i < 3; i++)
	{
		for(uint8_t j = i*6; j < i*6+6; j+=2)
     6d0:	1e 5f       	subi	r17, 0xFE	; 254
     6d2:	81 2f       	mov	r24, r17
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	86 30       	cpi	r24, 0x06	; 6
     6d8:	91 05       	cpc	r25, r1
     6da:	b4 f3       	brlt	.-20     	; 0x6c8 <_ZN8Settings13writeToEepromEPj+0x12>
     6dc:	18 c0       	rjmp	.+48     	; 0x70e <_ZN8Settings13writeToEepromEPj+0x58>
		{
			eeprom_write_word((uint16_t*)j, *(data + i));
     6de:	f8 01       	movw	r30, r16
     6e0:	60 81       	ld	r22, Z
     6e2:	71 81       	ldd	r23, Z+1	; 0x01
     6e4:	0e 94 fc 07 	call	0xff8	; 0xff8 <__eewr_word_m328p>

void Settings::writeToEeprom(uint16_t* data)
{
	for(uint8_t i = 0; i < 3; i++)
	{
		for(uint8_t j = i*6; j < i*6+6; j+=2)
     6e8:	f3 94       	inc	r15
     6ea:	f3 94       	inc	r15
     6ec:	8f 2d       	mov	r24, r15
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	8c 30       	cpi	r24, 0x0C	; 12
     6f2:	91 05       	cpc	r25, r1
     6f4:	a4 f3       	brlt	.-24     	; 0x6de <_ZN8Settings13writeToEepromEPj+0x28>
     6f6:	15 c0       	rjmp	.+42     	; 0x722 <_ZN8Settings13writeToEepromEPj+0x6c>
		{
			eeprom_write_word((uint16_t*)j, *(data + i));
     6f8:	68 81       	ld	r22, Y
     6fa:	79 81       	ldd	r23, Y+1	; 0x01
     6fc:	0e 94 fc 07 	call	0xff8	; 0xff8 <__eewr_word_m328p>

void Settings::writeToEeprom(uint16_t* data)
{
	for(uint8_t i = 0; i < 3; i++)
	{
		for(uint8_t j = i*6; j < i*6+6; j+=2)
     700:	1e 5f       	subi	r17, 0xFE	; 254
     702:	81 2f       	mov	r24, r17
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	82 31       	cpi	r24, 0x12	; 18
     708:	91 05       	cpc	r25, r1
     70a:	b4 f3       	brlt	.-20     	; 0x6f8 <_ZN8Settings13writeToEepromEPj+0x42>
     70c:	0f c0       	rjmp	.+30     	; 0x72c <_ZN8Settings13writeToEepromEPj+0x76>
		{
			eeprom_write_word((uint16_t*)j, *(data + i));
     70e:	8e 01       	movw	r16, r28
     710:	0e 5f       	subi	r16, 0xFE	; 254
     712:	1f 4f       	sbci	r17, 0xFF	; 255

void Settings::writeToEeprom(uint16_t* data)
{
	for(uint8_t i = 0; i < 3; i++)
	{
		for(uint8_t j = i*6; j < i*6+6; j+=2)
     714:	86 e0       	ldi	r24, 0x06	; 6
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0f 2e       	mov	r0, r31
     71a:	f6 e0       	ldi	r31, 0x06	; 6
     71c:	ff 2e       	mov	r15, r31
     71e:	f0 2d       	mov	r31, r0
     720:	de cf       	rjmp	.-68     	; 0x6de <_ZN8Settings13writeToEepromEPj+0x28>
		{
			eeprom_write_word((uint16_t*)j, *(data + i));
     722:	24 96       	adiw	r28, 0x04	; 4

void Settings::writeToEeprom(uint16_t* data)
{
	for(uint8_t i = 0; i < 3; i++)
	{
		for(uint8_t j = i*6; j < i*6+6; j+=2)
     724:	8c e0       	ldi	r24, 0x0C	; 12
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	1c e0       	ldi	r17, 0x0C	; 12
     72a:	e6 cf       	rjmp	.-52     	; 0x6f8 <_ZN8Settings13writeToEepromEPj+0x42>
		{
			eeprom_write_word((uint16_t*)j, *(data + i));
		}
	}
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	08 95       	ret

00000738 <_ZN8Settings25readFromEepromForAnalysisEv>:

uint16_t* Settings::readFromEepromForAnalysis(void)
{
     738:	af 92       	push	r10
     73a:	bf 92       	push	r11
     73c:	cf 92       	push	r12
     73e:	df 92       	push	r13
     740:	ef 92       	push	r14
     742:	ff 92       	push	r15
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	a8 2e       	mov	r10, r24
     74e:	b9 2e       	mov	r11, r25
     750:	08 2f       	mov	r16, r24
     752:	19 2f       	mov	r17, r25
     754:	c0 e0       	ldi	r28, 0x00	; 0
     756:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i = 0; i < 3; i++)
	{
		if(eeprom_read_word((uint16_t*)(i*6)) == eeprom_read_word((uint16_t*)(i*6)+2))
     758:	ce 01       	movw	r24, r28
     75a:	0e 94 f6 07 	call	0xfec	; 0xfec <__eerd_word_m328p>
     75e:	7c 01       	movw	r14, r24
     760:	ce 01       	movw	r24, r28
     762:	04 96       	adiw	r24, 0x04	; 4
     764:	0e 94 f6 07 	call	0xfec	; 0xfec <__eerd_word_m328p>
     768:	6c 01       	movw	r12, r24
     76a:	e8 16       	cp	r14, r24
     76c:	f9 06       	cpc	r15, r25
     76e:	21 f4       	brne	.+8      	; 0x778 <_ZN8Settings25readFromEepromForAnalysisEv+0x40>
		{
			motorSettingsForAnalysis[i] = eeprom_read_word((uint16_t*)(i*6));
     770:	f8 01       	movw	r30, r16
     772:	f1 82       	std	Z+1, r15	; 0x01
     774:	e0 82       	st	Z, r14
     776:	11 c0       	rjmp	.+34     	; 0x79a <_ZN8Settings25readFromEepromForAnalysisEv+0x62>
		}
		else if(eeprom_read_word((uint16_t*)(i*6)) == eeprom_read_word((uint16_t*)(i*6)+4))
     778:	ce 01       	movw	r24, r28
     77a:	08 96       	adiw	r24, 0x08	; 8
     77c:	0e 94 f6 07 	call	0xfec	; 0xfec <__eerd_word_m328p>
     780:	e8 16       	cp	r14, r24
     782:	f9 06       	cpc	r15, r25
     784:	21 f4       	brne	.+8      	; 0x78e <_ZN8Settings25readFromEepromForAnalysisEv+0x56>
		{
			motorSettingsForAnalysis[i] = eeprom_read_word((uint16_t*)(i*6));
     786:	f8 01       	movw	r30, r16
     788:	f1 82       	std	Z+1, r15	; 0x01
     78a:	e0 82       	st	Z, r14
     78c:	06 c0       	rjmp	.+12     	; 0x79a <_ZN8Settings25readFromEepromForAnalysisEv+0x62>
		}
		else if(eeprom_read_word((uint16_t*)(i*6)+2) == eeprom_read_word((uint16_t*)(i*6)+4))
     78e:	c8 16       	cp	r12, r24
     790:	d9 06       	cpc	r13, r25
     792:	19 f4       	brne	.+6      	; 0x79a <_ZN8Settings25readFromEepromForAnalysisEv+0x62>
		{
			motorSettingsForAnalysis[i] = eeprom_read_word((uint16_t*)(i*6)+2);
     794:	f8 01       	movw	r30, r16
     796:	d1 82       	std	Z+1, r13	; 0x01
     798:	c0 82       	st	Z, r12
     79a:	26 96       	adiw	r28, 0x06	; 6
     79c:	0e 5f       	subi	r16, 0xFE	; 254
     79e:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

uint16_t* Settings::readFromEepromForAnalysis(void)
{
	for(uint8_t i = 0; i < 3; i++)
     7a0:	c2 31       	cpi	r28, 0x12	; 18
     7a2:	d1 05       	cpc	r29, r1
     7a4:	c9 f6       	brne	.-78     	; 0x758 <_ZN8Settings25readFromEepromForAnalysisEv+0x20>
		{
			motorSettingsForAnalysis[i] = eeprom_read_word((uint16_t*)(i*6)+2);
		}
	}
	return motorSettingsForAnalysis;
}
     7a6:	8a 2d       	mov	r24, r10
     7a8:	9b 2d       	mov	r25, r11
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	cf 90       	pop	r12
     7ba:	bf 90       	pop	r11
     7bc:	af 90       	pop	r10
     7be:	08 95       	ret

000007c0 <_ZN8Settings21readFromEepromForSendEv>:

char* Settings::readFromEepromForSend(void)
{
     7c0:	8f 92       	push	r8
     7c2:	9f 92       	push	r9
     7c4:	af 92       	push	r10
     7c6:	bf 92       	push	r11
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	5c 01       	movw	r10, r24
	motorSettingsForSend[0] = '<';
     7da:	8c e3       	ldi	r24, 0x3C	; 60
     7dc:	f5 01       	movw	r30, r10
     7de:	86 83       	std	Z+6, r24	; 0x06
     7e0:	85 01       	movw	r16, r10
     7e2:	08 5f       	subi	r16, 0xF8	; 248
     7e4:	1f 4f       	sbci	r17, 0xFF	; 255
     7e6:	c1 e0       	ldi	r28, 0x01	; 1
     7e8:	d0 e0       	ldi	r29, 0x00	; 0
     7ea:	6e 01       	movw	r12, r28
     7ec:	f1 e0       	ldi	r31, 0x01	; 1
     7ee:	cf 1a       	sub	r12, r31
     7f0:	d1 08       	sbc	r13, r1
	for(uint8_t i = 0; i < 3; i++)
	{
		if(eeprom_read_word((uint16_t*)(i*6)) == eeprom_read_word((uint16_t*)(i*6)+2))
     7f2:	c6 01       	movw	r24, r12
     7f4:	0e 94 f6 07 	call	0xfec	; 0xfec <__eerd_word_m328p>
     7f8:	7c 01       	movw	r14, r24
     7fa:	ce 01       	movw	r24, r28
     7fc:	03 96       	adiw	r24, 0x03	; 3
     7fe:	0e 94 f6 07 	call	0xfec	; 0xfec <__eerd_word_m328p>
     802:	4c 01       	movw	r8, r24
     804:	e8 16       	cp	r14, r24
     806:	f9 06       	cpc	r15, r25
     808:	61 f4       	brne	.+24     	; 0x822 <_ZN8Settings21readFromEepromForSendEv+0x62>
		{
			motorSettingsForSend[i*2+2] = eeprom_read_byte((uint8_t*)(i*6));
     80a:	c6 01       	movw	r24, r12
     80c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__eerd_byte_m328p>
     810:	f8 01       	movw	r30, r16
     812:	80 83       	st	Z, r24
			motorSettingsForSend[i*2+1] = eeprom_read_byte((uint8_t*)(i*6)+1);
     814:	ce 01       	movw	r24, r28
     816:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__eerd_byte_m328p>
     81a:	f8 01       	movw	r30, r16
     81c:	31 97       	sbiw	r30, 0x01	; 1
     81e:	80 83       	st	Z, r24
     820:	23 c0       	rjmp	.+70     	; 0x868 <_ZN8Settings21readFromEepromForSendEv+0xa8>
		}
		else if(eeprom_read_word((uint16_t*)(i*6)) == eeprom_read_word((uint16_t*)(i*6)+4))
     822:	ce 01       	movw	r24, r28
     824:	07 96       	adiw	r24, 0x07	; 7
     826:	0e 94 f6 07 	call	0xfec	; 0xfec <__eerd_word_m328p>
     82a:	e8 16       	cp	r14, r24
     82c:	f9 06       	cpc	r15, r25
     82e:	61 f4       	brne	.+24     	; 0x848 <_ZN8Settings21readFromEepromForSendEv+0x88>
		{
			motorSettingsForSend[i*2+2] = eeprom_read_byte((uint8_t*)(i*6));
     830:	c6 01       	movw	r24, r12
     832:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__eerd_byte_m328p>
     836:	f8 01       	movw	r30, r16
     838:	80 83       	st	Z, r24
			motorSettingsForSend[i*2+1] = eeprom_read_byte((uint8_t*)(i*6)+1);
     83a:	ce 01       	movw	r24, r28
     83c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__eerd_byte_m328p>
     840:	f8 01       	movw	r30, r16
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	80 83       	st	Z, r24
     846:	10 c0       	rjmp	.+32     	; 0x868 <_ZN8Settings21readFromEepromForSendEv+0xa8>
		}
		else if(eeprom_read_word((uint16_t*)(i*6)+2) == eeprom_read_word((uint16_t*)(i*6)+4))
     848:	88 16       	cp	r8, r24
     84a:	99 06       	cpc	r9, r25
     84c:	69 f4       	brne	.+26     	; 0x868 <_ZN8Settings21readFromEepromForSendEv+0xa8>
		{
			motorSettingsForSend[i*2+2] = eeprom_read_byte((uint8_t*)(i*6)+2);
     84e:	ce 01       	movw	r24, r28
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__eerd_byte_m328p>
     856:	f8 01       	movw	r30, r16
     858:	80 83       	st	Z, r24
			motorSettingsForSend[i*2+1] = eeprom_read_byte((uint8_t*)(i*6)+3);
     85a:	ce 01       	movw	r24, r28
     85c:	02 96       	adiw	r24, 0x02	; 2
     85e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__eerd_byte_m328p>
     862:	f8 01       	movw	r30, r16
     864:	31 97       	sbiw	r30, 0x01	; 1
     866:	80 83       	st	Z, r24
     868:	0e 5f       	subi	r16, 0xFE	; 254
     86a:	1f 4f       	sbci	r17, 0xFF	; 255
     86c:	26 96       	adiw	r28, 0x06	; 6
}

char* Settings::readFromEepromForSend(void)
{
	motorSettingsForSend[0] = '<';
	for(uint8_t i = 0; i < 3; i++)
     86e:	c3 31       	cpi	r28, 0x13	; 19
     870:	d1 05       	cpc	r29, r1
     872:	09 f0       	breq	.+2      	; 0x876 <_ZN8Settings21readFromEepromForSendEv+0xb6>
     874:	ba cf       	rjmp	.-140    	; 0x7ea <_ZN8Settings21readFromEepromForSendEv+0x2a>
		{
			motorSettingsForSend[i*2+2] = eeprom_read_byte((uint8_t*)(i*6)+2);
			motorSettingsForSend[i*2+1] = eeprom_read_byte((uint8_t*)(i*6)+3);
		}
	}
	motorSettingsForSend[7] = '>';
     876:	8e e3       	ldi	r24, 0x3E	; 62
     878:	f5 01       	movw	r30, r10
     87a:	85 87       	std	Z+13, r24	; 0x0d
	motorSettingsForSend[8] = '\0';
     87c:	16 86       	std	Z+14, r1	; 0x0e
	return motorSettingsForSend;
}
     87e:	c5 01       	movw	r24, r10
     880:	06 96       	adiw	r24, 0x06	; 6
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	bf 90       	pop	r11
     894:	af 90       	pop	r10
     896:	9f 90       	pop	r9
     898:	8f 90       	pop	r8
     89a:	08 95       	ret

0000089c <_Z14initTimerCrashv>:
int16_t volatile timerCrashCounter = 0;
bool crashedFlag = false;

void initTimerCrash(void)
{
	TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);
     89c:	e1 eb       	ldi	r30, 0xB1	; 177
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	80 81       	ld	r24, Z
     8a2:	87 60       	ori	r24, 0x07	; 7
     8a4:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2);
     8a6:	e0 e7       	ldi	r30, 0x70	; 112
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	81 60       	ori	r24, 0x01	; 1
     8ae:	80 83       	st	Z, r24
     8b0:	08 95       	ret

000008b2 <main>:
}

int main(void)
{
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	6f 97       	sbiw	r28, 0x1f	; 31
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8c6:	2f ef       	ldi	r18, 0xFF	; 255
     8c8:	81 ee       	ldi	r24, 0xE1	; 225
     8ca:	94 e0       	ldi	r25, 0x04	; 4
     8cc:	21 50       	subi	r18, 0x01	; 1
     8ce:	80 40       	sbci	r24, 0x00	; 0
     8d0:	90 40       	sbci	r25, 0x00	; 0
     8d2:	e1 f7       	brne	.-8      	; 0x8cc <main+0x1a>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <main+0x24>
     8d6:	00 00       	nop
volatile int16_t CurrentADC::data_ADC2 = 512;
volatile int16_t CurrentADC::current_ADC = 0;

void CurrentADC::Init_ADC(void)
{
	ADMUX = (0 << REFS1)|(1 << REFS0)|(0 << ADLAR)|(0 << MUX3)|(0 << MUX2)|(0 << MUX1)|(0 << MUX0);
     8d8:	80 e4       	ldi	r24, 0x40	; 64
     8da:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN)|(1 << ADSC)|(1<<ADIE)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
     8de:	8f ec       	ldi	r24, 0xCF	; 207
     8e0:	80 93 7a 00 	sts	0x007A, r24
volatile char Uart::currentByte = 0;

void Uart::InitUart(uint16_t speed)
{
	// setting the baud rate
	UBRR0 = F_CPU/16/speed-1;
     8e4:	83 e3       	ldi	r24, 0x33	; 51
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	90 93 c5 00 	sts	0x00C5, r25
     8ec:	80 93 c4 00 	sts	0x00C4, r24
	// enabling TX & RX
	UCSR0A = (1 << UDRE0);
     8f0:	80 e2       	ldi	r24, 0x20	; 32
     8f2:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0C =  (1 << UCSZ01)|(1 << UCSZ00); //Set frame: 8data, 1 stop
     8f6:	86 e0       	ldi	r24, 0x06	; 6
     8f8:	80 93 c2 00 	sts	0x00C2, r24
}


void Uart::getchUartEn(void)
{
	UCSR0B = (1 << RXCIE0)|(1 << RXEN0);
     8fc:	80 e9       	ldi	r24, 0x90	; 144
     8fe:	80 93 c1 00 	sts	0x00C1, r24
	Settings set;

	currentADC.Init_ADC();
	uart.InitUart(19200);
	uart.getchUartEn();
	buttons.initButtons();
     902:	ce 01       	movw	r24, r28
     904:	4e 96       	adiw	r24, 0x1e	; 30
     906:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_ZN7Buttons11initButtonsEv>
	buttons.initMotor();
     90a:	ce 01       	movw	r24, r28
     90c:	4e 96       	adiw	r24, 0x1e	; 30
     90e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN7Buttons9initMotorEv>
	buttons.initTimer0();
     912:	ce 01       	movw	r24, r28
     914:	4e 96       	adiw	r24, 0x1e	; 30
     916:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_ZN7Buttons10initTimer0Ev>
	initTimerCrash();
     91a:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z14initTimerCrashv>
	
	bool buttonState[2] = {false, false};
     91e:	1c 8e       	std	Y+28, r1	; 0x1c
     920:	1d 8e       	std	Y+29, r1	; 0x1d
	int8_t rotate = 0;
	uint8_t motorSettings[3];
	
	for(uint8_t i = 0; i < 3; i++)
	{
		motorSettings[i] = *(set.readFromEepromForAnalysis() + i);
     922:	ce 01       	movw	r24, r28
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN8Settings25readFromEepromForAnalysisEv>
     92a:	ce 01       	movw	r24, r28
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN8Settings25readFromEepromForAnalysisEv>
     932:	ce 01       	movw	r24, r28
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN8Settings25readFromEepromForAnalysisEv>
	}
	
	sei();
     93a:	78 94       	sei
	buttons.initMotor();
	buttons.initTimer0();
	initTimerCrash();
	
	bool buttonState[2] = {false, false};
	int8_t rotate = 0;
     93c:	41 2c       	mov	r4, r1
     93e:	0f 2e       	mov	r0, r31
     940:	f4 e2       	ldi	r31, 0x24	; 36
     942:	6f 2e       	mov	r6, r31
     944:	f1 e0       	ldi	r31, 0x01	; 1
     946:	7f 2e       	mov	r7, r31
     948:	f0 2d       	mov	r31, r0
	sei();
	
    while(1)
    {
		//Checking currents
		if(crashedFlag == false)
     94a:	a1 2c       	mov	r10, r1
     94c:	b1 2c       	mov	r11, r1
						break;
						
						case false:
						buttons.disableMotor();
						buttons.motorStop();
						rotate = 0;
     94e:	21 2c       	mov	r2, r1
     950:	32 2c       	mov	r3, r2
	UCSR0C =  (1 << UCSZ01)|(1 << UCSZ00); //Set frame: 8data, 1 stop
}

void Uart::sendUartEn(void)
{
	UCSR0B = (1 << TXEN0);
     952:	0f 2e       	mov	r0, r31
     954:	f1 ec       	ldi	r31, 0xC1	; 193
     956:	8f 2e       	mov	r8, r31
     958:	91 2c       	mov	r9, r1
     95a:	f0 2d       	mov	r31, r0
	sei();
	
    while(1)
    {
		//Checking currents
		if(crashedFlag == false)
     95c:	80 91 1a 01 	lds	r24, 0x011A
     960:	81 11       	cpse	r24, r1
     962:	4f c0       	rjmp	.+158    	; 0xa02 <__stack+0x103>
     964:	fe 01       	movw	r30, r28
     966:	7c 96       	adiw	r30, 0x1c	; 28
     968:	7f 01       	movw	r14, r30
     96a:	63 01       	movw	r12, r6
     96c:	85 01       	movw	r16, r10
     96e:	50 2e       	mov	r5, r16
		{
			for(uint8_t i = 0; i < 2; i++)
			{
				current[i] = currentADC.getADC(i);
     970:	60 2f       	mov	r22, r16
     972:	ce 01       	movw	r24, r28
     974:	4f 96       	adiw	r24, 0x1f	; 31
     976:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN10CurrentADC6getADCEh>
     97a:	f8 01       	movw	r30, r16
     97c:	ee 0f       	add	r30, r30
     97e:	ff 1f       	adc	r31, r31
     980:	e1 5e       	subi	r30, 0xE1	; 225
     982:	fe 4f       	sbci	r31, 0xFE	; 254
     984:	91 83       	std	Z+1, r25	; 0x01
     986:	80 83       	st	Z, r24
     988:	0f 5f       	subi	r16, 0xFF	; 255
     98a:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

bool Buttons::getButtonState(uint8_t number)
{
	return buttonState[number];
     98c:	f6 01       	movw	r30, r12
     98e:	81 91       	ld	r24, Z+
     990:	6f 01       	movw	r12, r30
				
				if(buttonState[i] != buttons.getButtonState(i))
     992:	f7 01       	movw	r30, r14
     994:	90 81       	ld	r25, Z
     996:	98 17       	cp	r25, r24
     998:	69 f1       	breq	.+90     	; 0x9f4 <__stack+0xf5>
				{
					buttonState[i] = buttons.getButtonState(i);
     99a:	80 83       	st	Z, r24
					switch(buttonState[i])
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	09 f5       	brne	.+66     	; 0x9e2 <__stack+0xe3>
					{
						case true:
						buttons.disableMotor();
     9a0:	ce 01       	movw	r24, r28
     9a2:	4e 96       	adiw	r24, 0x1e	; 30
     9a4:	0e 94 57 03 	call	0x6ae	; 0x6ae <_ZN7Buttons12disableMotorEv>
     9a8:	ff ef       	ldi	r31, 0xFF	; 255
     9aa:	21 ee       	ldi	r18, 0xE1	; 225
     9ac:	84 e0       	ldi	r24, 0x04	; 4
     9ae:	f1 50       	subi	r31, 0x01	; 1
     9b0:	20 40       	sbci	r18, 0x00	; 0
     9b2:	80 40       	sbci	r24, 0x00	; 0
     9b4:	e1 f7       	brne	.-8      	; 0x9ae <__stack+0xaf>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <__stack+0xb9>
     9b8:	00 00       	nop
						_delay_ms(100);
						buttons.motorRotate(i);
     9ba:	65 2d       	mov	r22, r5
     9bc:	ce 01       	movw	r24, r28
     9be:	4e 96       	adiw	r24, 0x1e	; 30
     9c0:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Buttons11motorRotateEh>
     9c4:	9f ef       	ldi	r25, 0xFF	; 255
     9c6:	e1 ee       	ldi	r30, 0xE1	; 225
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	91 50       	subi	r25, 0x01	; 1
     9cc:	e0 40       	sbci	r30, 0x00	; 0
     9ce:	f0 40       	sbci	r31, 0x00	; 0
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <__stack+0xcb>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <__stack+0xd5>
     9d4:	00 00       	nop
						_delay_ms(100);
						buttons.enableMotor();
     9d6:	ce 01       	movw	r24, r28
     9d8:	4e 96       	adiw	r24, 0x1e	; 30
     9da:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_ZN7Buttons11enableMotorEv>
						rotate = i+1;
     9de:	40 2e       	mov	r4, r16
						break;
     9e0:	09 c0       	rjmp	.+18     	; 0x9f4 <__stack+0xf5>
						
						case false:
						buttons.disableMotor();
     9e2:	ce 01       	movw	r24, r28
     9e4:	4e 96       	adiw	r24, 0x1e	; 30
     9e6:	0e 94 57 03 	call	0x6ae	; 0x6ae <_ZN7Buttons12disableMotorEv>
						buttons.motorStop();
     9ea:	ce 01       	movw	r24, r28
     9ec:	4e 96       	adiw	r24, 0x1e	; 30
     9ee:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN7Buttons9motorStopEv>
						rotate = 0;
     9f2:	43 2c       	mov	r4, r3
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	e2 1a       	sub	r14, r18
     9f8:	f2 0a       	sbc	r15, r18
    while(1)
    {
		//Checking currents
		if(crashedFlag == false)
		{
			for(uint8_t i = 0; i < 2; i++)
     9fa:	02 30       	cpi	r16, 0x02	; 2
     9fc:	11 05       	cpc	r17, r1
     9fe:	09 f0       	breq	.+2      	; 0xa02 <__stack+0x103>
     a00:	b6 cf       	rjmp	.-148    	; 0x96e <__stack+0x6f>
				}
			}
		}
		
		//Checking Uart
		switch(uart.readRxCommand())
     a02:	ce 01       	movw	r24, r28
     a04:	0f 96       	adiw	r24, 0x0f	; 15
     a06:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN4Uart13readRxCommandEv>
     a0a:	85 30       	cpi	r24, 0x05	; 5
     a0c:	09 f4       	brne	.+2      	; 0xa10 <__stack+0x111>
     a0e:	49 c0       	rjmp	.+146    	; 0xaa2 <__stack+0x1a3>
     a10:	28 f4       	brcc	.+10     	; 0xa1c <__stack+0x11d>
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	51 f0       	breq	.+20     	; 0xa2a <__stack+0x12b>
     a16:	82 30       	cpi	r24, 0x02	; 2
     a18:	31 f1       	breq	.+76     	; 0xa66 <__stack+0x167>
     a1a:	a6 c0       	rjmp	.+332    	; 0xb68 <__stack+0x269>
     a1c:	86 30       	cpi	r24, 0x06	; 6
     a1e:	09 f4       	brne	.+2      	; 0xa22 <__stack+0x123>
     a20:	5a c0       	rjmp	.+180    	; 0xad6 <__stack+0x1d7>
     a22:	87 30       	cpi	r24, 0x07	; 7
     a24:	09 f4       	brne	.+2      	; 0xa28 <__stack+0x129>
     a26:	84 c0       	rjmp	.+264    	; 0xb30 <__stack+0x231>
     a28:	9f c0       	rjmp	.+318    	; 0xb68 <__stack+0x269>
     a2a:	8f ef       	ldi	r24, 0xFF	; 255
     a2c:	91 ee       	ldi	r25, 0xE1	; 225
     a2e:	e4 e0       	ldi	r30, 0x04	; 4
     a30:	81 50       	subi	r24, 0x01	; 1
     a32:	90 40       	sbci	r25, 0x00	; 0
     a34:	e0 40       	sbci	r30, 0x00	; 0
     a36:	e1 f7       	brne	.-8      	; 0xa30 <__stack+0x131>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <__stack+0x13b>
     a3a:	00 00       	nop
     a3c:	88 e0       	ldi	r24, 0x08	; 8
     a3e:	f4 01       	movw	r30, r8
     a40:	80 83       	st	Z, r24
		{
			case COM_1:
			_delay_ms(100);
			uart.sendUartEn();
			uart.sendTxBuff(current[0], rotate, 1);
     a42:	60 91 1f 01 	lds	r22, 0x011F
     a46:	70 91 20 01 	lds	r23, 0x0120
     a4a:	21 e0       	ldi	r18, 0x01	; 1
     a4c:	44 2d       	mov	r20, r4
     a4e:	ce 01       	movw	r24, r28
     a50:	0f 96       	adiw	r24, 0x0f	; 15
     a52:	0e 94 92 02 	call	0x524	; 0x524 <_ZN4Uart10sendTxBuffEiah>
			uart.clearRxBuff();
     a56:	ce 01       	movw	r24, r28
     a58:	0f 96       	adiw	r24, 0x0f	; 15
     a5a:	0e 94 c8 02 	call	0x590	; 0x590 <_ZN4Uart11clearRxBuffEv>
}


void Uart::getchUartEn(void)
{
	UCSR0B = (1 << RXCIE0)|(1 << RXEN0);
     a5e:	80 e9       	ldi	r24, 0x90	; 144
     a60:	f4 01       	movw	r30, r8
     a62:	80 83       	st	Z, r24
     a64:	81 c0       	rjmp	.+258    	; 0xb68 <__stack+0x269>
     a66:	ff ef       	ldi	r31, 0xFF	; 255
     a68:	21 ee       	ldi	r18, 0xE1	; 225
     a6a:	84 e0       	ldi	r24, 0x04	; 4
     a6c:	f1 50       	subi	r31, 0x01	; 1
     a6e:	20 40       	sbci	r18, 0x00	; 0
     a70:	80 40       	sbci	r24, 0x00	; 0
     a72:	e1 f7       	brne	.-8      	; 0xa6c <__stack+0x16d>
     a74:	00 c0       	rjmp	.+0      	; 0xa76 <__stack+0x177>
     a76:	00 00       	nop
	UCSR0C =  (1 << UCSZ01)|(1 << UCSZ00); //Set frame: 8data, 1 stop
}

void Uart::sendUartEn(void)
{
	UCSR0B = (1 << TXEN0);
     a78:	88 e0       	ldi	r24, 0x08	; 8
     a7a:	f4 01       	movw	r30, r8
     a7c:	80 83       	st	Z, r24
			break;
			
			case COM_2:
			_delay_ms(100);
			uart.sendUartEn();
			uart.sendTxBuff(current[1], rotate, 2);
     a7e:	60 91 21 01 	lds	r22, 0x0121
     a82:	70 91 22 01 	lds	r23, 0x0122
     a86:	22 e0       	ldi	r18, 0x02	; 2
     a88:	44 2d       	mov	r20, r4
     a8a:	ce 01       	movw	r24, r28
     a8c:	0f 96       	adiw	r24, 0x0f	; 15
     a8e:	0e 94 92 02 	call	0x524	; 0x524 <_ZN4Uart10sendTxBuffEiah>
			uart.clearRxBuff();
     a92:	ce 01       	movw	r24, r28
     a94:	0f 96       	adiw	r24, 0x0f	; 15
     a96:	0e 94 c8 02 	call	0x590	; 0x590 <_ZN4Uart11clearRxBuffEv>
}


void Uart::getchUartEn(void)
{
	UCSR0B = (1 << RXCIE0)|(1 << RXEN0);
     a9a:	80 e9       	ldi	r24, 0x90	; 144
     a9c:	f4 01       	movw	r30, r8
     a9e:	80 83       	st	Z, r24
     aa0:	63 c0       	rjmp	.+198    	; 0xb68 <__stack+0x269>
     aa2:	ff ef       	ldi	r31, 0xFF	; 255
     aa4:	21 ee       	ldi	r18, 0xE1	; 225
     aa6:	84 e0       	ldi	r24, 0x04	; 4
     aa8:	f1 50       	subi	r31, 0x01	; 1
     aaa:	20 40       	sbci	r18, 0x00	; 0
     aac:	80 40       	sbci	r24, 0x00	; 0
     aae:	e1 f7       	brne	.-8      	; 0xaa8 <__stack+0x1a9>
     ab0:	00 c0       	rjmp	.+0      	; 0xab2 <__stack+0x1b3>
     ab2:	00 00       	nop
	UCSR0C =  (1 << UCSZ01)|(1 << UCSZ00); //Set frame: 8data, 1 stop
}

void Uart::sendUartEn(void)
{
	UCSR0B = (1 << TXEN0);
     ab4:	88 e0       	ldi	r24, 0x08	; 8
     ab6:	f4 01       	movw	r30, r8
     ab8:	80 83       	st	Z, r24
			break;
			
			case COM_Q:
			_delay_ms(100);
			uart.sendUartEn();
			uart.sendTxBuff("Arduino is found");
     aba:	64 e0       	ldi	r22, 0x04	; 4
     abc:	71 e0       	ldi	r23, 0x01	; 1
     abe:	ce 01       	movw	r24, r28
     ac0:	0f 96       	adiw	r24, 0x0f	; 15
     ac2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN4Uart10sendTxBuffEPc>
			uart.clearRxBuff();
     ac6:	ce 01       	movw	r24, r28
     ac8:	0f 96       	adiw	r24, 0x0f	; 15
     aca:	0e 94 c8 02 	call	0x590	; 0x590 <_ZN4Uart11clearRxBuffEv>
}


void Uart::getchUartEn(void)
{
	UCSR0B = (1 << RXCIE0)|(1 << RXEN0);
     ace:	80 e9       	ldi	r24, 0x90	; 144
     ad0:	f4 01       	movw	r30, r8
     ad2:	80 83       	st	Z, r24
     ad4:	49 c0       	rjmp	.+146    	; 0xb68 <__stack+0x269>
     ad6:	ff ef       	ldi	r31, 0xFF	; 255
     ad8:	21 ee       	ldi	r18, 0xE1	; 225
     ada:	84 e0       	ldi	r24, 0x04	; 4
     adc:	f1 50       	subi	r31, 0x01	; 1
     ade:	20 40       	sbci	r18, 0x00	; 0
     ae0:	80 40       	sbci	r24, 0x00	; 0
     ae2:	e1 f7       	brne	.-8      	; 0xadc <__stack+0x1dd>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <__stack+0x1e7>
     ae6:	00 00       	nop
			uart.getchUartEn();
			break;
			
			case COM_SW:
			_delay_ms(100);
			set.writeToEeprom(uart.getSettings());
     ae8:	be 01       	movw	r22, r28
     aea:	6a 5e       	subi	r22, 0xEA	; 234
     aec:	7f 4f       	sbci	r23, 0xFF	; 255
     aee:	ce 01       	movw	r24, r28
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN8Settings13writeToEepromEPj>
			
			for(uint8_t i = 0; i < 3; i++)
			{
				motorSettings[i] = *(set.readFromEepromForAnalysis() + i);
     af6:	ce 01       	movw	r24, r28
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN8Settings25readFromEepromForAnalysisEv>
     afe:	ce 01       	movw	r24, r28
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN8Settings25readFromEepromForAnalysisEv>
     b06:	ce 01       	movw	r24, r28
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN8Settings25readFromEepromForAnalysisEv>
	UCSR0C =  (1 << UCSZ01)|(1 << UCSZ00); //Set frame: 8data, 1 stop
}

void Uart::sendUartEn(void)
{
	UCSR0B = (1 << TXEN0);
     b0e:	88 e0       	ldi	r24, 0x08	; 8
     b10:	f4 01       	movw	r30, r8
     b12:	80 83       	st	Z, r24
			}
			uart.sendUartEn();
			uart.sendTxBuff("Ok_S");
     b14:	65 e1       	ldi	r22, 0x15	; 21
     b16:	71 e0       	ldi	r23, 0x01	; 1
     b18:	ce 01       	movw	r24, r28
     b1a:	0f 96       	adiw	r24, 0x0f	; 15
     b1c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN4Uart10sendTxBuffEPc>
			uart.clearRxBuff();
     b20:	ce 01       	movw	r24, r28
     b22:	0f 96       	adiw	r24, 0x0f	; 15
     b24:	0e 94 c8 02 	call	0x590	; 0x590 <_ZN4Uart11clearRxBuffEv>
}


void Uart::getchUartEn(void)
{
	UCSR0B = (1 << RXCIE0)|(1 << RXEN0);
     b28:	80 e9       	ldi	r24, 0x90	; 144
     b2a:	f4 01       	movw	r30, r8
     b2c:	80 83       	st	Z, r24
     b2e:	1c c0       	rjmp	.+56     	; 0xb68 <__stack+0x269>
     b30:	ff ef       	ldi	r31, 0xFF	; 255
     b32:	21 ee       	ldi	r18, 0xE1	; 225
     b34:	84 e0       	ldi	r24, 0x04	; 4
     b36:	f1 50       	subi	r31, 0x01	; 1
     b38:	20 40       	sbci	r18, 0x00	; 0
     b3a:	80 40       	sbci	r24, 0x00	; 0
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <__stack+0x237>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <__stack+0x241>
     b40:	00 00       	nop
	UCSR0C =  (1 << UCSZ01)|(1 << UCSZ00); //Set frame: 8data, 1 stop
}

void Uart::sendUartEn(void)
{
	UCSR0B = (1 << TXEN0);
     b42:	88 e0       	ldi	r24, 0x08	; 8
     b44:	f4 01       	movw	r30, r8
     b46:	80 83       	st	Z, r24
			break;
			
			case COM_SR:
			_delay_ms(100);
			uart.sendUartEn();
			uart.sendTxBuff(set.readFromEepromForSend());
     b48:	ce 01       	movw	r24, r28
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN8Settings21readFromEepromForSendEv>
     b50:	bc 01       	movw	r22, r24
     b52:	ce 01       	movw	r24, r28
     b54:	0f 96       	adiw	r24, 0x0f	; 15
     b56:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN4Uart10sendTxBuffEPc>
			uart.clearRxBuff();
     b5a:	ce 01       	movw	r24, r28
     b5c:	0f 96       	adiw	r24, 0x0f	; 15
     b5e:	0e 94 c8 02 	call	0x590	; 0x590 <_ZN4Uart11clearRxBuffEv>
}


void Uart::getchUartEn(void)
{
	UCSR0B = (1 << RXCIE0)|(1 << RXEN0);
     b62:	80 e9       	ldi	r24, 0x90	; 144
     b64:	f4 01       	movw	r30, r8
     b66:	80 83       	st	Z, r24
		}
		
		//Crashing of motors
		//if(motorSettings[CHECKING_CURRENT_EN] == 0x31)
		//{
			if((current[0] > 400) || (current[1] > 400))
     b68:	80 91 1f 01 	lds	r24, 0x011F
     b6c:	90 91 20 01 	lds	r25, 0x0120
     b70:	81 39       	cpi	r24, 0x91	; 145
     b72:	91 40       	sbci	r25, 0x01	; 1
     b74:	3c f4       	brge	.+14     	; 0xb84 <__stack+0x285>
     b76:	80 91 21 01 	lds	r24, 0x0121
     b7a:	90 91 22 01 	lds	r25, 0x0122
     b7e:	81 39       	cpi	r24, 0x91	; 145
     b80:	91 40       	sbci	r25, 0x01	; 1
     b82:	9c f1       	brlt	.+102    	; 0xbea <__stack+0x2eb>
			{
				timerCrashCounter = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	90 93 1c 01 	sts	0x011C, r25
     b8c:	80 93 1b 01 	sts	0x011B, r24
				if(timerCrash > 8)
     b90:	80 91 1d 01 	lds	r24, 0x011D
     b94:	90 91 1e 01 	lds	r25, 0x011E
     b98:	09 97       	sbiw	r24, 0x09	; 9
     b9a:	0c f4       	brge	.+2      	; 0xb9e <__stack+0x29f>
     b9c:	df ce       	rjmp	.-578    	; 0x95c <__stack+0x5d>
				{
					buttons.disableMotor();
     b9e:	ce 01       	movw	r24, r28
     ba0:	4e 96       	adiw	r24, 0x1e	; 30
     ba2:	0e 94 57 03 	call	0x6ae	; 0x6ae <_ZN7Buttons12disableMotorEv>
					buttons.motorStop();
     ba6:	ce 01       	movw	r24, r28
     ba8:	4e 96       	adiw	r24, 0x1e	; 30
     baa:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN7Buttons9motorStopEv>
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	91 ee       	ldi	r25, 0xE1	; 225
     bb2:	e4 e0       	ldi	r30, 0x04	; 4
     bb4:	81 50       	subi	r24, 0x01	; 1
     bb6:	90 40       	sbci	r25, 0x00	; 0
     bb8:	e0 40       	sbci	r30, 0x00	; 0
     bba:	e1 f7       	brne	.-8      	; 0xbb4 <__stack+0x2b5>
     bbc:	00 c0       	rjmp	.+0      	; 0xbbe <__stack+0x2bf>
     bbe:	00 00       	nop
					_delay_ms(100);
					timerCrashCounter = 0;
     bc0:	b0 92 1c 01 	sts	0x011C, r11
     bc4:	a0 92 1b 01 	sts	0x011B, r10
					timerCrash = 0;
     bc8:	b0 92 1e 01 	sts	0x011E, r11
     bcc:	a0 92 1d 01 	sts	0x011D, r10
					crashedFlag = true;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 1a 01 	sts	0x011A, r24
					current[0] = 0;
     bd6:	10 92 20 01 	sts	0x0120, r1
     bda:	10 92 1f 01 	sts	0x011F, r1
					current[1] = 0;
     bde:	10 92 22 01 	sts	0x0122, r1
     be2:	10 92 21 01 	sts	0x0121, r1
					rotate = 0;
     be6:	42 2c       	mov	r4, r2
     be8:	b9 ce       	rjmp	.-654    	; 0x95c <__stack+0x5d>
				}
			}
			else
			{
				timerCrashCounter = 0;
     bea:	b0 92 1c 01 	sts	0x011C, r11
     bee:	a0 92 1b 01 	sts	0x011B, r10
				timerCrash = 0;
     bf2:	b0 92 1e 01 	sts	0x011E, r11
     bf6:	a0 92 1d 01 	sts	0x011D, r10
     bfa:	b0 ce       	rjmp	.-672    	; 0x95c <__stack+0x5d>

00000bfc <__vector_9>:
		//}
    }
}

ISR(TIMER2_OVF_vect)
{
     bfc:	1f 92       	push	r1
     bfe:	0f 92       	push	r0
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	0f 92       	push	r0
     c04:	11 24       	eor	r1, r1
     c06:	2f 93       	push	r18
     c08:	3f 93       	push	r19
     c0a:	8f 93       	push	r24
     c0c:	9f 93       	push	r25
	timerCrash += timerCrashCounter;
     c0e:	80 91 1b 01 	lds	r24, 0x011B
     c12:	90 91 1c 01 	lds	r25, 0x011C
     c16:	20 91 1d 01 	lds	r18, 0x011D
     c1a:	30 91 1e 01 	lds	r19, 0x011E
     c1e:	82 0f       	add	r24, r18
     c20:	93 1f       	adc	r25, r19
     c22:	90 93 1e 01 	sts	0x011E, r25
     c26:	80 93 1d 01 	sts	0x011D, r24
}
     c2a:	9f 91       	pop	r25
     c2c:	8f 91       	pop	r24
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <__vector_21>:

ISR(ADC_vect, ISR_BLOCK)
{
     c3c:	1f 92       	push	r1
     c3e:	0f 92       	push	r0
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	0f 92       	push	r0
     c44:	11 24       	eor	r1, r1
     c46:	2f 93       	push	r18
     c48:	3f 93       	push	r19
     c4a:	4f 93       	push	r20
     c4c:	5f 93       	push	r21
     c4e:	6f 93       	push	r22
     c50:	7f 93       	push	r23
     c52:	8f 93       	push	r24
     c54:	9f 93       	push	r25
     c56:	af 93       	push	r26
     c58:	bf 93       	push	r27
     c5a:	ef 93       	push	r30
     c5c:	ff 93       	push	r31
	CurrentADC::ADC_INTERRUPT();
     c5e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10CurrentADC13ADC_INTERRUPTEv>
}
     c62:	ff 91       	pop	r31
     c64:	ef 91       	pop	r30
     c66:	bf 91       	pop	r27
     c68:	af 91       	pop	r26
     c6a:	9f 91       	pop	r25
     c6c:	8f 91       	pop	r24
     c6e:	7f 91       	pop	r23
     c70:	6f 91       	pop	r22
     c72:	5f 91       	pop	r21
     c74:	4f 91       	pop	r20
     c76:	3f 91       	pop	r19
     c78:	2f 91       	pop	r18
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <__vector_18>:

ISR(USART_RX_vect, ISR_BLOCK)
{
     c84:	1f 92       	push	r1
     c86:	0f 92       	push	r0
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	0f 92       	push	r0
     c8c:	11 24       	eor	r1, r1
     c8e:	2f 93       	push	r18
     c90:	3f 93       	push	r19
     c92:	4f 93       	push	r20
     c94:	5f 93       	push	r21
     c96:	6f 93       	push	r22
     c98:	7f 93       	push	r23
     c9a:	8f 93       	push	r24
     c9c:	9f 93       	push	r25
     c9e:	af 93       	push	r26
     ca0:	bf 93       	push	r27
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
	Uart::readByte();
     ca6:	0e 94 99 01 	call	0x332	; 0x332 <_ZN4Uart8readByteEv>
}
     caa:	ff 91       	pop	r31
     cac:	ef 91       	pop	r30
     cae:	bf 91       	pop	r27
     cb0:	af 91       	pop	r26
     cb2:	9f 91       	pop	r25
     cb4:	8f 91       	pop	r24
     cb6:	7f 91       	pop	r23
     cb8:	6f 91       	pop	r22
     cba:	5f 91       	pop	r21
     cbc:	4f 91       	pop	r20
     cbe:	3f 91       	pop	r19
     cc0:	2f 91       	pop	r18
     cc2:	0f 90       	pop	r0
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	0f 90       	pop	r0
     cc8:	1f 90       	pop	r1
     cca:	18 95       	reti

00000ccc <__vector_16>:

ISR(TIMER0_OVF_vect, ISR_NOBLOCK)
{
     ccc:	78 94       	sei
     cce:	1f 92       	push	r1
     cd0:	0f 92       	push	r0
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	0f 92       	push	r0
     cd6:	11 24       	eor	r1, r1
     cd8:	2f 93       	push	r18
     cda:	3f 93       	push	r19
     cdc:	4f 93       	push	r20
     cde:	5f 93       	push	r21
     ce0:	6f 93       	push	r22
     ce2:	7f 93       	push	r23
     ce4:	8f 93       	push	r24
     ce6:	9f 93       	push	r25
     ce8:	af 93       	push	r26
     cea:	bf 93       	push	r27
     cec:	ef 93       	push	r30
     cee:	ff 93       	push	r31
	Buttons::checkButtonsState();
     cf0:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN7Buttons17checkButtonsStateEv>
     cf4:	ff 91       	pop	r31
     cf6:	ef 91       	pop	r30
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	7f 91       	pop	r23
     d02:	6f 91       	pop	r22
     d04:	5f 91       	pop	r21
     d06:	4f 91       	pop	r20
     d08:	3f 91       	pop	r19
     d0a:	2f 91       	pop	r18
     d0c:	0f 90       	pop	r0
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	0f 90       	pop	r0
     d12:	1f 90       	pop	r1
     d14:	18 95       	reti

00000d16 <__fixsfsi>:
     d16:	04 d0       	rcall	.+8      	; 0xd20 <__fixunssfsi>
     d18:	68 94       	set
     d1a:	b1 11       	cpse	r27, r1
     d1c:	8d c0       	rjmp	.+282    	; 0xe38 <__fp_szero>
     d1e:	08 95       	ret

00000d20 <__fixunssfsi>:
     d20:	70 d0       	rcall	.+224    	; 0xe02 <__fp_splitA>
     d22:	88 f0       	brcs	.+34     	; 0xd46 <__fixunssfsi+0x26>
     d24:	9f 57       	subi	r25, 0x7F	; 127
     d26:	90 f0       	brcs	.+36     	; 0xd4c <__fixunssfsi+0x2c>
     d28:	b9 2f       	mov	r27, r25
     d2a:	99 27       	eor	r25, r25
     d2c:	b7 51       	subi	r27, 0x17	; 23
     d2e:	a0 f0       	brcs	.+40     	; 0xd58 <__fixunssfsi+0x38>
     d30:	d1 f0       	breq	.+52     	; 0xd66 <__fixunssfsi+0x46>
     d32:	66 0f       	add	r22, r22
     d34:	77 1f       	adc	r23, r23
     d36:	88 1f       	adc	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	1a f0       	brmi	.+6      	; 0xd42 <__fixunssfsi+0x22>
     d3c:	ba 95       	dec	r27
     d3e:	c9 f7       	brne	.-14     	; 0xd32 <__fixunssfsi+0x12>
     d40:	12 c0       	rjmp	.+36     	; 0xd66 <__fixunssfsi+0x46>
     d42:	b1 30       	cpi	r27, 0x01	; 1
     d44:	81 f0       	breq	.+32     	; 0xd66 <__fixunssfsi+0x46>
     d46:	77 d0       	rcall	.+238    	; 0xe36 <__fp_zero>
     d48:	b1 e0       	ldi	r27, 0x01	; 1
     d4a:	08 95       	ret
     d4c:	74 c0       	rjmp	.+232    	; 0xe36 <__fp_zero>
     d4e:	67 2f       	mov	r22, r23
     d50:	78 2f       	mov	r23, r24
     d52:	88 27       	eor	r24, r24
     d54:	b8 5f       	subi	r27, 0xF8	; 248
     d56:	39 f0       	breq	.+14     	; 0xd66 <__fixunssfsi+0x46>
     d58:	b9 3f       	cpi	r27, 0xF9	; 249
     d5a:	cc f3       	brlt	.-14     	; 0xd4e <__fixunssfsi+0x2e>
     d5c:	86 95       	lsr	r24
     d5e:	77 95       	ror	r23
     d60:	67 95       	ror	r22
     d62:	b3 95       	inc	r27
     d64:	d9 f7       	brne	.-10     	; 0xd5c <__fixunssfsi+0x3c>
     d66:	3e f4       	brtc	.+14     	; 0xd76 <__fixunssfsi+0x56>
     d68:	90 95       	com	r25
     d6a:	80 95       	com	r24
     d6c:	70 95       	com	r23
     d6e:	61 95       	neg	r22
     d70:	7f 4f       	sbci	r23, 0xFF	; 255
     d72:	8f 4f       	sbci	r24, 0xFF	; 255
     d74:	9f 4f       	sbci	r25, 0xFF	; 255
     d76:	08 95       	ret

00000d78 <__floatunsisf>:
     d78:	e8 94       	clt
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <__floatsisf+0x12>

00000d7c <__floatsisf>:
     d7c:	97 fb       	bst	r25, 7
     d7e:	3e f4       	brtc	.+14     	; 0xd8e <__floatsisf+0x12>
     d80:	90 95       	com	r25
     d82:	80 95       	com	r24
     d84:	70 95       	com	r23
     d86:	61 95       	neg	r22
     d88:	7f 4f       	sbci	r23, 0xFF	; 255
     d8a:	8f 4f       	sbci	r24, 0xFF	; 255
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	99 23       	and	r25, r25
     d90:	a9 f0       	breq	.+42     	; 0xdbc <__floatsisf+0x40>
     d92:	f9 2f       	mov	r31, r25
     d94:	96 e9       	ldi	r25, 0x96	; 150
     d96:	bb 27       	eor	r27, r27
     d98:	93 95       	inc	r25
     d9a:	f6 95       	lsr	r31
     d9c:	87 95       	ror	r24
     d9e:	77 95       	ror	r23
     da0:	67 95       	ror	r22
     da2:	b7 95       	ror	r27
     da4:	f1 11       	cpse	r31, r1
     da6:	f8 cf       	rjmp	.-16     	; 0xd98 <__floatsisf+0x1c>
     da8:	fa f4       	brpl	.+62     	; 0xde8 <__floatsisf+0x6c>
     daa:	bb 0f       	add	r27, r27
     dac:	11 f4       	brne	.+4      	; 0xdb2 <__floatsisf+0x36>
     dae:	60 ff       	sbrs	r22, 0
     db0:	1b c0       	rjmp	.+54     	; 0xde8 <__floatsisf+0x6c>
     db2:	6f 5f       	subi	r22, 0xFF	; 255
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	8f 4f       	sbci	r24, 0xFF	; 255
     db8:	9f 4f       	sbci	r25, 0xFF	; 255
     dba:	16 c0       	rjmp	.+44     	; 0xde8 <__floatsisf+0x6c>
     dbc:	88 23       	and	r24, r24
     dbe:	11 f0       	breq	.+4      	; 0xdc4 <__floatsisf+0x48>
     dc0:	96 e9       	ldi	r25, 0x96	; 150
     dc2:	11 c0       	rjmp	.+34     	; 0xde6 <__floatsisf+0x6a>
     dc4:	77 23       	and	r23, r23
     dc6:	21 f0       	breq	.+8      	; 0xdd0 <__floatsisf+0x54>
     dc8:	9e e8       	ldi	r25, 0x8E	; 142
     dca:	87 2f       	mov	r24, r23
     dcc:	76 2f       	mov	r23, r22
     dce:	05 c0       	rjmp	.+10     	; 0xdda <__floatsisf+0x5e>
     dd0:	66 23       	and	r22, r22
     dd2:	71 f0       	breq	.+28     	; 0xdf0 <__floatsisf+0x74>
     dd4:	96 e8       	ldi	r25, 0x86	; 134
     dd6:	86 2f       	mov	r24, r22
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	2a f0       	brmi	.+10     	; 0xde8 <__floatsisf+0x6c>
     dde:	9a 95       	dec	r25
     de0:	66 0f       	add	r22, r22
     de2:	77 1f       	adc	r23, r23
     de4:	88 1f       	adc	r24, r24
     de6:	da f7       	brpl	.-10     	; 0xdde <__floatsisf+0x62>
     de8:	88 0f       	add	r24, r24
     dea:	96 95       	lsr	r25
     dec:	87 95       	ror	r24
     dee:	97 f9       	bld	r25, 7
     df0:	08 95       	ret

00000df2 <__fp_split3>:
     df2:	57 fd       	sbrc	r21, 7
     df4:	90 58       	subi	r25, 0x80	; 128
     df6:	44 0f       	add	r20, r20
     df8:	55 1f       	adc	r21, r21
     dfa:	59 f0       	breq	.+22     	; 0xe12 <__fp_splitA+0x10>
     dfc:	5f 3f       	cpi	r21, 0xFF	; 255
     dfe:	71 f0       	breq	.+28     	; 0xe1c <__fp_splitA+0x1a>
     e00:	47 95       	ror	r20

00000e02 <__fp_splitA>:
     e02:	88 0f       	add	r24, r24
     e04:	97 fb       	bst	r25, 7
     e06:	99 1f       	adc	r25, r25
     e08:	61 f0       	breq	.+24     	; 0xe22 <__fp_splitA+0x20>
     e0a:	9f 3f       	cpi	r25, 0xFF	; 255
     e0c:	79 f0       	breq	.+30     	; 0xe2c <__fp_splitA+0x2a>
     e0e:	87 95       	ror	r24
     e10:	08 95       	ret
     e12:	12 16       	cp	r1, r18
     e14:	13 06       	cpc	r1, r19
     e16:	14 06       	cpc	r1, r20
     e18:	55 1f       	adc	r21, r21
     e1a:	f2 cf       	rjmp	.-28     	; 0xe00 <__fp_split3+0xe>
     e1c:	46 95       	lsr	r20
     e1e:	f1 df       	rcall	.-30     	; 0xe02 <__fp_splitA>
     e20:	08 c0       	rjmp	.+16     	; 0xe32 <__fp_splitA+0x30>
     e22:	16 16       	cp	r1, r22
     e24:	17 06       	cpc	r1, r23
     e26:	18 06       	cpc	r1, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	f1 cf       	rjmp	.-30     	; 0xe0e <__fp_splitA+0xc>
     e2c:	86 95       	lsr	r24
     e2e:	71 05       	cpc	r23, r1
     e30:	61 05       	cpc	r22, r1
     e32:	08 94       	sec
     e34:	08 95       	ret

00000e36 <__fp_zero>:
     e36:	e8 94       	clt

00000e38 <__fp_szero>:
     e38:	bb 27       	eor	r27, r27
     e3a:	66 27       	eor	r22, r22
     e3c:	77 27       	eor	r23, r23
     e3e:	cb 01       	movw	r24, r22
     e40:	97 f9       	bld	r25, 7
     e42:	08 95       	ret

00000e44 <__mulsf3>:
     e44:	0b d0       	rcall	.+22     	; 0xe5c <__mulsf3x>
     e46:	78 c0       	rjmp	.+240    	; 0xf38 <__fp_round>
     e48:	69 d0       	rcall	.+210    	; 0xf1c <__fp_pscA>
     e4a:	28 f0       	brcs	.+10     	; 0xe56 <__mulsf3+0x12>
     e4c:	6e d0       	rcall	.+220    	; 0xf2a <__fp_pscB>
     e4e:	18 f0       	brcs	.+6      	; 0xe56 <__mulsf3+0x12>
     e50:	95 23       	and	r25, r21
     e52:	09 f0       	breq	.+2      	; 0xe56 <__mulsf3+0x12>
     e54:	5a c0       	rjmp	.+180    	; 0xf0a <__fp_inf>
     e56:	5f c0       	rjmp	.+190    	; 0xf16 <__fp_nan>
     e58:	11 24       	eor	r1, r1
     e5a:	ee cf       	rjmp	.-36     	; 0xe38 <__fp_szero>

00000e5c <__mulsf3x>:
     e5c:	ca df       	rcall	.-108    	; 0xdf2 <__fp_split3>
     e5e:	a0 f3       	brcs	.-24     	; 0xe48 <__mulsf3+0x4>

00000e60 <__mulsf3_pse>:
     e60:	95 9f       	mul	r25, r21
     e62:	d1 f3       	breq	.-12     	; 0xe58 <__mulsf3+0x14>
     e64:	95 0f       	add	r25, r21
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	55 1f       	adc	r21, r21
     e6a:	62 9f       	mul	r22, r18
     e6c:	f0 01       	movw	r30, r0
     e6e:	72 9f       	mul	r23, r18
     e70:	bb 27       	eor	r27, r27
     e72:	f0 0d       	add	r31, r0
     e74:	b1 1d       	adc	r27, r1
     e76:	63 9f       	mul	r22, r19
     e78:	aa 27       	eor	r26, r26
     e7a:	f0 0d       	add	r31, r0
     e7c:	b1 1d       	adc	r27, r1
     e7e:	aa 1f       	adc	r26, r26
     e80:	64 9f       	mul	r22, r20
     e82:	66 27       	eor	r22, r22
     e84:	b0 0d       	add	r27, r0
     e86:	a1 1d       	adc	r26, r1
     e88:	66 1f       	adc	r22, r22
     e8a:	82 9f       	mul	r24, r18
     e8c:	22 27       	eor	r18, r18
     e8e:	b0 0d       	add	r27, r0
     e90:	a1 1d       	adc	r26, r1
     e92:	62 1f       	adc	r22, r18
     e94:	73 9f       	mul	r23, r19
     e96:	b0 0d       	add	r27, r0
     e98:	a1 1d       	adc	r26, r1
     e9a:	62 1f       	adc	r22, r18
     e9c:	83 9f       	mul	r24, r19
     e9e:	a0 0d       	add	r26, r0
     ea0:	61 1d       	adc	r22, r1
     ea2:	22 1f       	adc	r18, r18
     ea4:	74 9f       	mul	r23, r20
     ea6:	33 27       	eor	r19, r19
     ea8:	a0 0d       	add	r26, r0
     eaa:	61 1d       	adc	r22, r1
     eac:	23 1f       	adc	r18, r19
     eae:	84 9f       	mul	r24, r20
     eb0:	60 0d       	add	r22, r0
     eb2:	21 1d       	adc	r18, r1
     eb4:	82 2f       	mov	r24, r18
     eb6:	76 2f       	mov	r23, r22
     eb8:	6a 2f       	mov	r22, r26
     eba:	11 24       	eor	r1, r1
     ebc:	9f 57       	subi	r25, 0x7F	; 127
     ebe:	50 40       	sbci	r21, 0x00	; 0
     ec0:	8a f0       	brmi	.+34     	; 0xee4 <__mulsf3_pse+0x84>
     ec2:	e1 f0       	breq	.+56     	; 0xefc <__mulsf3_pse+0x9c>
     ec4:	88 23       	and	r24, r24
     ec6:	4a f0       	brmi	.+18     	; 0xeda <__mulsf3_pse+0x7a>
     ec8:	ee 0f       	add	r30, r30
     eca:	ff 1f       	adc	r31, r31
     ecc:	bb 1f       	adc	r27, r27
     ece:	66 1f       	adc	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	88 1f       	adc	r24, r24
     ed4:	91 50       	subi	r25, 0x01	; 1
     ed6:	50 40       	sbci	r21, 0x00	; 0
     ed8:	a9 f7       	brne	.-22     	; 0xec4 <__mulsf3_pse+0x64>
     eda:	9e 3f       	cpi	r25, 0xFE	; 254
     edc:	51 05       	cpc	r21, r1
     ede:	70 f0       	brcs	.+28     	; 0xefc <__mulsf3_pse+0x9c>
     ee0:	14 c0       	rjmp	.+40     	; 0xf0a <__fp_inf>
     ee2:	aa cf       	rjmp	.-172    	; 0xe38 <__fp_szero>
     ee4:	5f 3f       	cpi	r21, 0xFF	; 255
     ee6:	ec f3       	brlt	.-6      	; 0xee2 <__mulsf3_pse+0x82>
     ee8:	98 3e       	cpi	r25, 0xE8	; 232
     eea:	dc f3       	brlt	.-10     	; 0xee2 <__mulsf3_pse+0x82>
     eec:	86 95       	lsr	r24
     eee:	77 95       	ror	r23
     ef0:	67 95       	ror	r22
     ef2:	b7 95       	ror	r27
     ef4:	f7 95       	ror	r31
     ef6:	e7 95       	ror	r30
     ef8:	9f 5f       	subi	r25, 0xFF	; 255
     efa:	c1 f7       	brne	.-16     	; 0xeec <__mulsf3_pse+0x8c>
     efc:	fe 2b       	or	r31, r30
     efe:	88 0f       	add	r24, r24
     f00:	91 1d       	adc	r25, r1
     f02:	96 95       	lsr	r25
     f04:	87 95       	ror	r24
     f06:	97 f9       	bld	r25, 7
     f08:	08 95       	ret

00000f0a <__fp_inf>:
     f0a:	97 f9       	bld	r25, 7
     f0c:	9f 67       	ori	r25, 0x7F	; 127
     f0e:	80 e8       	ldi	r24, 0x80	; 128
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	08 95       	ret

00000f16 <__fp_nan>:
     f16:	9f ef       	ldi	r25, 0xFF	; 255
     f18:	80 ec       	ldi	r24, 0xC0	; 192
     f1a:	08 95       	ret

00000f1c <__fp_pscA>:
     f1c:	00 24       	eor	r0, r0
     f1e:	0a 94       	dec	r0
     f20:	16 16       	cp	r1, r22
     f22:	17 06       	cpc	r1, r23
     f24:	18 06       	cpc	r1, r24
     f26:	09 06       	cpc	r0, r25
     f28:	08 95       	ret

00000f2a <__fp_pscB>:
     f2a:	00 24       	eor	r0, r0
     f2c:	0a 94       	dec	r0
     f2e:	12 16       	cp	r1, r18
     f30:	13 06       	cpc	r1, r19
     f32:	14 06       	cpc	r1, r20
     f34:	05 06       	cpc	r0, r21
     f36:	08 95       	ret

00000f38 <__fp_round>:
     f38:	09 2e       	mov	r0, r25
     f3a:	03 94       	inc	r0
     f3c:	00 0c       	add	r0, r0
     f3e:	11 f4       	brne	.+4      	; 0xf44 <__fp_round+0xc>
     f40:	88 23       	and	r24, r24
     f42:	52 f0       	brmi	.+20     	; 0xf58 <__fp_round+0x20>
     f44:	bb 0f       	add	r27, r27
     f46:	40 f4       	brcc	.+16     	; 0xf58 <__fp_round+0x20>
     f48:	bf 2b       	or	r27, r31
     f4a:	11 f4       	brne	.+4      	; 0xf50 <__fp_round+0x18>
     f4c:	60 ff       	sbrs	r22, 0
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <__fp_round+0x20>
     f50:	6f 5f       	subi	r22, 0xFF	; 255
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	8f 4f       	sbci	r24, 0xFF	; 255
     f56:	9f 4f       	sbci	r25, 0xFF	; 255
     f58:	08 95       	ret

00000f5a <__udivmodsi4>:
     f5a:	a1 e2       	ldi	r26, 0x21	; 33
     f5c:	1a 2e       	mov	r1, r26
     f5e:	aa 1b       	sub	r26, r26
     f60:	bb 1b       	sub	r27, r27
     f62:	fd 01       	movw	r30, r26
     f64:	0d c0       	rjmp	.+26     	; 0xf80 <__udivmodsi4_ep>

00000f66 <__udivmodsi4_loop>:
     f66:	aa 1f       	adc	r26, r26
     f68:	bb 1f       	adc	r27, r27
     f6a:	ee 1f       	adc	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	a2 17       	cp	r26, r18
     f70:	b3 07       	cpc	r27, r19
     f72:	e4 07       	cpc	r30, r20
     f74:	f5 07       	cpc	r31, r21
     f76:	20 f0       	brcs	.+8      	; 0xf80 <__udivmodsi4_ep>
     f78:	a2 1b       	sub	r26, r18
     f7a:	b3 0b       	sbc	r27, r19
     f7c:	e4 0b       	sbc	r30, r20
     f7e:	f5 0b       	sbc	r31, r21

00000f80 <__udivmodsi4_ep>:
     f80:	66 1f       	adc	r22, r22
     f82:	77 1f       	adc	r23, r23
     f84:	88 1f       	adc	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	1a 94       	dec	r1
     f8a:	69 f7       	brne	.-38     	; 0xf66 <__udivmodsi4_loop>
     f8c:	60 95       	com	r22
     f8e:	70 95       	com	r23
     f90:	80 95       	com	r24
     f92:	90 95       	com	r25
     f94:	9b 01       	movw	r18, r22
     f96:	ac 01       	movw	r20, r24
     f98:	bd 01       	movw	r22, r26
     f9a:	cf 01       	movw	r24, r30
     f9c:	08 95       	ret

00000f9e <__divmodsi4>:
     f9e:	05 2e       	mov	r0, r21
     fa0:	97 fb       	bst	r25, 7
     fa2:	1e f4       	brtc	.+6      	; 0xfaa <__divmodsi4+0xc>
     fa4:	00 94       	com	r0
     fa6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__negsi2>
     faa:	57 fd       	sbrc	r21, 7
     fac:	07 d0       	rcall	.+14     	; 0xfbc <__divmodsi4_neg2>
     fae:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__udivmodsi4>
     fb2:	07 fc       	sbrc	r0, 7
     fb4:	03 d0       	rcall	.+6      	; 0xfbc <__divmodsi4_neg2>
     fb6:	4e f4       	brtc	.+18     	; 0xfca <__divmodsi4_exit>
     fb8:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__negsi2>

00000fbc <__divmodsi4_neg2>:
     fbc:	50 95       	com	r21
     fbe:	40 95       	com	r20
     fc0:	30 95       	com	r19
     fc2:	21 95       	neg	r18
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255

00000fca <__divmodsi4_exit>:
     fca:	08 95       	ret

00000fcc <__negsi2>:
     fcc:	90 95       	com	r25
     fce:	80 95       	com	r24
     fd0:	70 95       	com	r23
     fd2:	61 95       	neg	r22
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	8f 4f       	sbci	r24, 0xFF	; 255
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	08 95       	ret

00000fdc <__eerd_byte_m328p>:
     fdc:	f9 99       	sbic	0x1f, 1	; 31
     fde:	fe cf       	rjmp	.-4      	; 0xfdc <__eerd_byte_m328p>
     fe0:	92 bd       	out	0x22, r25	; 34
     fe2:	81 bd       	out	0x21, r24	; 33
     fe4:	f8 9a       	sbi	0x1f, 0	; 31
     fe6:	99 27       	eor	r25, r25
     fe8:	80 b5       	in	r24, 0x20	; 32
     fea:	08 95       	ret

00000fec <__eerd_word_m328p>:
     fec:	a8 e1       	ldi	r26, 0x18	; 24
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	42 e0       	ldi	r20, 0x02	; 2
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__eerd_blraw_m328p>

00000ff8 <__eewr_word_m328p>:
     ff8:	0e 94 11 08 	call	0x1022	; 0x1022 <__eewr_byte_m328p>
     ffc:	27 2f       	mov	r18, r23
     ffe:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__eewr_r18_m328p>

00001002 <__eerd_block_m328p>:
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22

00001006 <__eerd_blraw_m328p>:
    1006:	fc 01       	movw	r30, r24
    1008:	f9 99       	sbic	0x1f, 1	; 31
    100a:	fe cf       	rjmp	.-4      	; 0x1008 <__eerd_blraw_m328p+0x2>
    100c:	06 c0       	rjmp	.+12     	; 0x101a <__eerd_blraw_m328p+0x14>
    100e:	f2 bd       	out	0x22, r31	; 34
    1010:	e1 bd       	out	0x21, r30	; 33
    1012:	f8 9a       	sbi	0x1f, 0	; 31
    1014:	31 96       	adiw	r30, 0x01	; 1
    1016:	00 b4       	in	r0, 0x20	; 32
    1018:	0d 92       	st	X+, r0
    101a:	41 50       	subi	r20, 0x01	; 1
    101c:	50 40       	sbci	r21, 0x00	; 0
    101e:	b8 f7       	brcc	.-18     	; 0x100e <__eerd_blraw_m328p+0x8>
    1020:	08 95       	ret

00001022 <__eewr_byte_m328p>:
    1022:	26 2f       	mov	r18, r22

00001024 <__eewr_r18_m328p>:
    1024:	f9 99       	sbic	0x1f, 1	; 31
    1026:	fe cf       	rjmp	.-4      	; 0x1024 <__eewr_r18_m328p>
    1028:	1f ba       	out	0x1f, r1	; 31
    102a:	92 bd       	out	0x22, r25	; 34
    102c:	81 bd       	out	0x21, r24	; 33
    102e:	20 bd       	out	0x20, r18	; 32
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	fa 9a       	sbi	0x1f, 2	; 31
    1036:	f9 9a       	sbi	0x1f, 1	; 31
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	08 95       	ret

0000103e <_exit>:
    103e:	f8 94       	cli

00001040 <__stop_program>:
    1040:	ff cf       	rjmp	.-2      	; 0x1040 <__stop_program>
